htmlとjavascriptについての質問です。

ページの中で表示する必要がない項目を非表示にしたいと表います。

表示項目は以下の感じで表示されます。

a: [   ]    e: [   ]    ①

[]はテキストボックスで数値の入力が可能です。


htmlでは以下のように定義しています。

<p class="pb20">
    <label id="l_ma" style="width: 20px; display: inline-block">a:</label>
    <input type="number" id="ma" value="" style="width:40px; text-align:right;">
    &emsp;
    <label for="me" style="width: 20px; display: inline-block">e:</label>
    <input type="number" id="me" value="" style="width:40px; text-align:right;"><br>
</p>

表示/非表示はjsで以下のように定義しています。

    // 非表示
    document.getElementById('l_ma').style.display = "none";
    document.getElementById('l_me').style.display = "none";
    document.getElementById('ma').style.display = "none";
    document.getElementById('me').style.display = "none";
    // 表示
    document.getElementById('l_ma').style.display = "inline";
    document.getElementById('l_me').style.display = "inline";
    document.getElementById('ma').style.display = "inline";
    document.getElementById('me').style.display = "inline";

js側で一旦非表示にしてから、再び表示させると、

a:[   ]    e:[   ]  ②

①と比べて②は、ラベルとテキストボックスの間が詰まってしまいます。
これは、何故でしょうか？

inline -> inline-block に修正することで解決




displayプロパティはCSSの重要なプロパティで、要素がどのように表示されるかを決定します。inline、block、inline-blockの違いは次の通りです：

display: inline
表示方法: インライン要素として表示されます。
幅と高さ: 要素の内容に合わせて自動的に決まります。幅や高さを指定しても反映されません。
改行: インライン要素は自動的に次の要素と同じ行に並び、改行されません。
例: span, a, em, strong
使用例:

html
コードをコピーする
<span>インライン要素</span> <span>次のインライン要素</span>
これらは同じ行に表示されます。

display: block
表示方法: ブロック要素として表示されます。
幅と高さ: デフォルトでは幅が親要素いっぱいに広がります。高さも内容に応じて自動的に決まりますが、幅や高さを自由に指定できます。
改行: ブロック要素の前後で改行されます。
例: div, p, h1, ul, li
使用例:

html
コードをコピーする
<div>ブロック要素</div>
<div>次のブロック要素</div>
これらはそれぞれ改行されて表示されます。

display: inline-block
表示方法: インライン要素のように横並びになりつつ、ブロック要素の特性も持ちます。
幅と高さ: 自由に指定できます。インライン要素のように横並びになりますが、ブロック要素のように幅と高さを持つことができます。
改行: インライン要素のように同じ行に並びますが、ブロック要素の特性を持つため、幅と高さを指定できます。
例: インラインボタンやラベル
使用例:

html
コードをコピーする
<span style="display: inline-block; width: 100px; height: 50px;">インラインブロック要素</span>
<span style="display: inline-block; width: 100px; height: 50px;">次のインラインブロック要素</span>
これらは同じ行に並びつつ、指定した幅と高さを持ちます。

まとめ
inline: 横並びになり、幅と高さを指定できない。
block: 縦に並び、幅と高さを指定できる。
inline-block: 横並びになり、幅と高さを指定できる。
それぞれのプロパティは要素のレイアウトと見た目に大きな影響を与えるため、使用するシチュエーションに応じて適切なプロパティを選択することが重要です。




20240517

htmlについての質問です。
複数行(実質は2行です)入力できる入力フォームを用意して、数式を入力できるようにしたいと思っています。

1行しか入力できなかったときは以下の通りでした。
①
<!-- 入力ボックス -->
<p class="pb10">
    <label id="l_dxdt" style="width: 60px; display: inline-block">$dx / dt = $</label>
    <input type="text" id="dxdt" value="x^2 * (y - x)" style="width:310px; text-align:left;">
</p>

2行入力できるように以下のように変更しました。
②
<!-- 入力ボックス -->
<p class="pb10">
    <label id="l_dxdt" style="width: 60px; display: inline-block">$dx / dt = $</label>
    <textarea id="dxdt" resize="none" cols="30" rows="2">x^2 * (y - x)</textarea>
</p>

①のときは、以下のように表示されていました。
dx/dt = |x^2 * (y - x)                         |

②にするとラベルが以下のように下に下がってしまいます。
        |x^2 * (y - x)                         |
dx/dt = |                                      |

できれば

dx/dt = |x^2 * (y - x)                         |
        |                                      |

と表示したいです。どうすればよいでしょうか？



回答


HTMLで複数行入力可能なテキストエリアを使用しながら、
ラベルと入力フォームを縦に揃えるには、CSSのフレックスボックスを利用する方法が有効です。
以下のようにHTMLとCSSを調整すると、ラベルとテキストエリアが意図したとおりに表示されます。

html
コードをコピーする
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .input-container {
            display: flex;
            align-items: flex-start; /* ラベルを上に揃える */
        }
        .input-container label {
            width: 60px; /* ラベルの幅を固定 */
            display: inline-block;
            margin-top: 6px; /* テキストエリアとの垂直位置を調整 */
        }
        .input-container textarea {
            resize: none; /* テキストエリアのサイズ変更を無効化 */
            width: 310px; /* テキストエリアの幅を指定 */
            text-align: left;
        }
    </style>
    <title>数式入力フォーム</title>
</head>
<body>
    <p class="pb10 input-container">
        <label id="l_dxdt">$dx / dt = $</label>
        <textarea id="dxdt" cols="30" rows="2">x^2 * (y - x)</textarea>
    </p>
</body>
</html>
説明
.input-container クラスでフレックスボックスを使用し、 align-items: flex-start を指定することで、ラベルがテキストエリアの上部に揃います。
ラベルに margin-top: 6px; を追加することで、ラベルとテキストエリアの垂直位置の微調整を行います。適切な値に調整してください。
テキストエリアのサイズ変更を無効化するために resize: none; を設定しています。
この方法で、ラベルとテキストエリアが縦に揃い、見た目が整った表示になります。


ありがとうございます。やはり、containerを使用するのですね。昔の話になりますが、
何でもかんでもtableを使って段組をしていた頃がありました。「表」の作成以外にtable要素を使うなとなって、
あれこれ、工夫していました。その頃使いたかった「表」以外でのtable要素がcontainer要素に置き換わったのですね。
ChatGPT
おっしゃる通りです。かつてはレイアウトを作るためにテーブル要素を多用していましたが、現在のウェブデザインでは、よりセマンティックで柔軟なレイアウトを実現するために、CSSのフレックスボックスやグリッドレイアウトが広く使われています。これにより、HTMLは構造に集中し、CSSはデザインとレイアウトに集中できるようになりました。

フレックスボックスやグリッドレイアウトは、以下のようなメリットがあります：

柔軟性: コンテナ内の要素の配置やサイズ調整が容易に行えます。
レスポンシブデザイン: 異なる画面サイズに対応するレイアウトが簡単に実現できます。
セマンティクス: HTML要素が本来の意味を持つため、検索エンジンや支援技術（スクリーンリーダーなど）にとって理解しやすくなります。
以下は、フレックスボックスを利用して、レイアウトを整える具体例です：

html
コードをコピーする
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .input-container {
            display: flex;
            align-items: flex-start; /* ラベルを上に揃える */
            gap: 10px; /* ラベルとテキストエリアの間隔を調整 */
        }
        .input-container label {
            width: 60px; /* ラベルの幅を固定 */
            display: inline-block;
            margin-top: 6px; /* テキストエリアとの垂直位置を調整 */
        }
        .input-container textarea {
            resize: none; /* テキストエリアのサイズ変更を無効化 */
            width: 310px; /* テキストエリアの幅を指定 */
            text-align: left;
        }
    </style>
    <title>数式入力フォーム</title>
</head>
<body>
    <p class="pb10 input-container">
        <label id="l_dxdt">$dx / dt = $</label>
        <textarea id="dxdt" cols="30" rows="2">x^2 * (y - x)</textarea>
    </p>
</body>
</html>
主なポイント
display: flex;: フレックスボックスのレイアウトを適用し、子要素の配置を柔軟に管理。
align-items: flex-start;: ラベルをテキストエリアの上部に揃えるために使用。
gap: 10px;: ラベルとテキストエリアの間のスペースを確保（必要に応じて調整）。
フレックスボックスを使用することで、HTMLの構造はシンプルに保ちつつ、CSSでレイアウトを自由に調整できるようになります。これにより、よりモダンでメンテナブルなコードが実現します。


2/2

セマンティクスにも関わってくるのですね。参考になりました。ありがとうございます。
ChatGPT
どういたしまして！セマンティクスは、ウェブデザインにおいて非常に重要な概念です。適切なHTML要素を使うことで、ドキュメントの構造が明確になり、検索エンジンのインデックスやアクセシビリティの向上にもつながります。CSSを使って見た目を調整することで、HTMLの構造とスタイルを分離し、コードの可読性と保守性を高めることができます。

さらに、以下のポイントも覚えておくと役立ちます：

セマンティクスの重要性
アクセシビリティ: スクリーンリーダーなどの支援技術は、適切なHTMLタグを使用することでコンテンツを正しく解釈しやすくなります。
SEO（検索エンジン最適化）: 検索エンジンはHTMLの構造を解析してページの内容を評価します。セマンティックなタグを使用することで、検索エンジンがページをより正確に評価できるようになります。
保守性: 意味を持つタグを使うことで、コードの読みやすさが向上し、将来的なメンテナンスが容易になります。
具体的なセマンティクスの例
見出しには <h1> から <h6> を使用して、ページの構造を明確にする。
ナビゲーションメニューには <nav> を使用する。
主要なコンテンツには <main> を使用する。
各セクションには <section> や <article> を使用して、内容を分割する。
これらのポイントを意識することで、セマンティックなHTMLを作成し、ユーザーにとって使いやすく、開発者にとってもメンテナンスしやすいウェブページを構築できます。

引き続き、何か質問があれば気軽にお知らせください。お手伝いできることがあれば、いつでもサポートいたします。




20240518

htmlについての質問です。
ページを左右に分けて、左側はcanvasでグラフが描画され、右側にグラフのデータ(式など)を表示させています。
表示させる式が長くなってしまった場合の対応方法を教えて下さい。

質問の詳細はhtml、javascript、css のコードの下にまとめています。


htmlは以下の通り

<!DOCTYPE HTML >
<html>

<HEAD>
    <META charset="UTF-8">

    <title>Differential Equations</title>

    <!-- js start -->

        <!-- Math.js -->
        <script type="text/javascript"
           src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.4.4/math.js">
        </script>

        <script type="text/javascript"
          src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
        </script>
        <script type="text/x-mathjax-config">
          MathJax.Hub.Config({
            TeX: { equationNumbers: { autoNumber: "AMS" }},
            tex2jax: {
              inlineMath: [ ['$','$'], ["\\(","\\)"] ],
              processEscapes: true
            },
            "HTML-CSS": { matchFontHeight: false },
            displayAlign: "left",
            displayIndent: "2em"
          });

        </script>

        <!-- deq initialize -->
        <script src="libs/etc/js/deq00_v4.js" type="text/javascript"></script>

    <!-- js end -->

</HEAD>

<BODY id="common-k" onload="initialize()">

    <div id="container">

        <div id="main990"> <!-- page main: start -->

            <!-- title -->
            <div id="title20">
                <h3 class="pt30 pb20">
                    微分方程式 解曲線の描画
                </h3>
            </div>

            <!-- contents -->
            <div class="pic-left990 pb30">
                <div class="contents-2col-left" >
                    <p class="pb15" align="right">
                        <select id="type" onchange="changeType()">
                            <option value="09&09">&emsp;&emsp;[99] ユーザー定義</option>
                        </select>
                    </p>
                    <p class="pb10">
                        <canvas id="graphCanvas" width="580" height="580" style="border: 1px solid #000;"></canvas>
                    </p>
                    <p class="pb10" align="right">
                        近似方法
                        <select id="mode" onchange="changeMode()">
                            <option value="1">&emsp;&emsp;Euler法</option>
                            <option value="2">&emsp;&emsp;修正Euler法</option>
                            <option value="3">&emsp;&emsp;Runge-Kutta法</option>
                        </select>
                    </p>
                </div>
                <!-- deq javascript呼び出し -->
                <script src="libs/etc/js/deq01_v4.js" type="text/javascript"></script>

                <div class="contents-2col-right" >
                    <p>
                        方程式
                    </p>
                    <!-- 入力ボックス -->
                    <p class="pb10 input-container">
                        <label id="l_dxdt">$dx / dt = $</label>
                        <textarea id="dxdt" cols="30" rows="2">y * (1 + 2 * x*x + 2 * y*y)</textarea>
                    </p>
                    <p class="pb10 input-container">
                        <label id="l_dydt">$dy / dt = $</label>
①                      <textarea id="dydt" cols="30" rows="2">x * (1 - 2 * x*x - 2 * y*y) + y * (2 * x*x + 2 * y*y + 1) * (pow(x*x + y*y, 2) - (x*x - y*y))</textarea>
                    </p>
                    <!-- 方程式の表示(TeX) -->
                    <p class="pb10">
                        <label for="dx"><span id="dx"></span></label>
②                      <label for="dy"><span id="dy"></span></label>
                        <label for="where"><span id="where"></span></label>
                    </p>
                    <!---->
                    <p class="pb60">
                        <button class="btn-radius-solid" id="start" onclick="startAnimation()">Start</button>
                        &emsp;&emsp;&nbsp;&nbsp;
                        <button class="btn-radius-solid" id="stop" onclick="stopAnimation()">Stop</button>
                        &emsp;&emsp;&emsp;
                        reset&nbsp;
                        <input type="checkbox" id="cb_reset" onclick="handleCheckbox(this.checked)" checked>
                    </p>
                    ...以下、省略

javascriptは以下の通り

        // user define 関連
        var formula_dx;
        var formula_dy;
        var node_dx;
        var node_dy;

        function startAnimation() {
            // 20240513 add for user definition
            formula_dx = document.getElementById('dxdt').value;
            formula_dy = document.getElementById('dydt').value;
            // 式を表示する
            node_dx = math.parse(formula_dx);
            node_dy = math.parse(formula_dy);
            document.getElementById('dx').innerText = "\\[ \\frac{dx}{dt} = " + node_dx.toTex() + "\\]";
②          document.getElementById('dy').innerText = "\\[ \\frac{dx}{dt} = " + node_dy.toTex() + "\\]";
        }
        ...以下、省略


cssは以下の通り(一部)

div#main990  { width: 990px;  margin-left: auto;  margin-right: auto; text-align: center; border: 0px solid #FF9900;}
.pic-left990   {width:  990px; text-align:left; margin-right:auto; }
.contents-2col-left { display: inline-block; * display: inline; * zoom: 1; vertical-align: middle; padding-right: 20px;}
.contents-2col-right { display: inline-block; * display: inline; * zoom: 1; vertical-align: middle;}
/* テキストエリア 複数入力 */
.input-container {
    display: flex;
    align-items: flex-start; /* ラベルを上に揃える */
}
.input-container label {
    width: 60px; /* ラベルの幅を固定 */
    display: inline-block;
    margin-top: -2px; /* テキストエリアとの垂直位置を調整 */
}
.input-container textarea {
    resize: none; /* テキストエリアのサイズ変更を無効化 */
    width: 310px; /* テキストエリアの幅を指定 */
    text-align: left;
}


html①が入力した式です。
js②(TeXです)で出力すると、1行の長い式になってしまい(html②)、
ページの右側全体が、ページ左側の下に移動してしまいます。

何とか、ページの右側の位置を変えずに式を表示させたいと思っています。

幾つか考えてみました。

1. ページの表示幅が990pxという条件を、html②の行だけ無視して、右にはみ出させる。

2. html②で表示式を折り返す(改行させる)。htmlとcssで実行させることが可能か？

3. js側で、formula_dyに式を取り込んだ段階で、2つのパーツに分けて表示させる。
   文字数が規定値を超えた場合はnode_dyをnode_dy1, node_dy2に分けて格納し、TeX形式で出力する

それぞれの方法での実現可否とその方法、他の方法で簡単に実装できる方法があれば、教えて下さい。
よろしくお願いします。


回答


HTMLとCSSを使って式が長くなってもレイアウトが崩れないようにするための方法をいくつか検討します。各方法の実現可否とその方法について説明します。

方法1: ページの表示幅を無視して右にはみ出させる
この方法はあまり現実的ではありません。レイアウトが崩れる原因となり、ユーザーエクスペリエンスが悪化する可能性が高いです。

方法2: CSSで表示式を折り返す（改行させる）
CSSを使って表示式を折り返すことは可能です。ただし、MathJaxがレンダリングする式が長くなった場合、単純なCSSのword-wrapやoverflow-wrapは効果がないことがあります。

以下のCSSを試してみてください：

css
コードをコピーする
.contents-2col-right {
    display: inline-block;
    width: 400px; /* 必要に応じて調整 */
    word-wrap: break-word;
    overflow-wrap: break-word;
}
しかし、この方法でも完全に解決しない場合があります。次にJavaScriptを使った方法を検討します。

方法3: JavaScriptで式を分割して表示する
JavaScriptで長い式を分割して表示することができます。これには、式が一定の文字数を超えた場合に複数の要素に分けて表示するロジックを追加します。

以下に、JavaScriptのコードを修正した例を示します：

javascript
コードをコピーする
function startAnimation() {
    // 20240513 add for user definition
    formula_dx = document.getElementById('dxdt').value;
    formula_dy = document.getElementById('dydt').value;
    // 式を表示する
    node_dx = math.parse(formula_dx);
    node_dy = math.parse(formula_dy);

    var dyTex = "\\[ \\frac{dy}{dt} = " + node_dy.toTex() + "\\]";

    // 長い式を分割
    var maxLineLength = 50; // 最大文字数（調整可能）
    var splitTex = splitLongTex(dyTex, maxLineLength);

    document.getElementById('dx').innerText = "\\[ \\frac{dx}{dt} = " + node_dx.toTex() + "\\]";
    document.getElementById('dy').innerHTML = splitTex;
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
}

function splitLongTex(tex, maxLineLength) {
    var result = '';
    var currentLine = '';
    var words = tex.split(' ');

    words.forEach(function(word) {
        if ((currentLine + word).length > maxLineLength) {
            result += currentLine + '<br>';
            currentLine = word + ' ';
        } else {
            currentLine += word + ' ';
        }
    });

    result += currentLine;
    return result;
}
上記のコードでは、splitLongTex関数がテキストを指定した最大文字数に基づいて分割し、改行タグ<br>を追加しています。この方法で、長い式が複数行に分割され、ページのレイアウトが崩れにくくなります。

この方法を使えば、式が長くなってもレイアウトが崩れることを防ぎ、ユーザーにとって見やすい形式で表示できます。


ありがとうございます。確認してみます。
ChatGPT
どういたしまして！もし何か問題が発生したり、さらに調整が必要な場合は、遠慮なくお知らせください。適切な表示を実現できるようにサポートいたします。

念のため、以下に全体の修正コードを再度まとめておきます。

HTML
html
コードをコピーする
<!DOCTYPE HTML>
<html>
<HEAD>
    <META charset="UTF-8">
    <title>Differential Equations</title>
    <!-- js start -->
    <!-- Math.js -->
    <script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.4.4/math.js">
    </script>
    <script type="text/javascript"
        src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            TeX: { equationNumbers: { autoNumber: "AMS" }},
            tex2jax: {
                inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                processEscapes: true
            },
            "HTML-CSS": { matchFontHeight: false },
            displayAlign: "left",
            displayIndent: "2em"
        });
    </script>
    <!-- deq initialize -->
    <script src="libs/etc/js/deq00_v4.js" type="text/javascript"></script>
    <!-- js end -->
</HEAD>
<BODY id="common-k" onload="initialize()">
    <div id="container">
        <div id="main990"> <!-- page main: start -->
            <!-- title -->
            <div id="title20">
                <h3 class="pt30 pb20">
                    微分方程式 解曲線の描画
                </h3>
            </div>
            <!-- contents -->
            <div class="pic-left990 pb30">
                <div class="contents-2col-left">
                    <p class="pb15" align="right">
                        <select id="type" onchange="changeType()">
                            <option value="09&09">&emsp;&emsp;[99] ユーザー定義</option>
                        </select>
                    </p>
                    <p class="pb10">
                        <canvas id="graphCanvas" width="580" height="580" style="border: 1px solid #000;"></canvas>
                    </p>
                    <p class="pb10" align="right">
                        近似方法
                        <select id="mode" onchange="changeMode()">
                            <option value="1">&emsp;&emsp;Euler法</option>
                            <option value="2">&emsp;&emsp;修正Euler法</option>
                            <option value="3">&emsp;&emsp;Runge-Kutta法</option>
                        </select>
                    </p>
                </div>
                <!-- deq javascript呼び出し -->
                <script src="libs/etc/js/deq01_v4.js" type="text/javascript"></script>
                <div class="contents-2col-right">
                    <p>方程式</p>
                    <!-- 入力ボックス -->
                    <p class="pb10 input-container">
                        <label id="l_dxdt">$dx / dt = $</label>
                        <textarea id="dxdt" cols="30" rows="2">y * (1 + 2 * x*x + 2 * y*y)</textarea>
                    </p>
                    <p class="pb10 input-container">
                        <label id="l_dydt">$dy / dt = $</label>
                        <textarea id="dydt" cols="30" rows="2">x * (1 - 2 * x*x - 2 * y*y) + y * (2 * x*x + 2 * y*y + 1) * (pow(x*x + y*y, 2) - (x*x - y*y))</textarea>
                    </p>
                    <!-- 方程式の表示(TeX) -->
                    <p class="pb10">
                        <label for="dx"><span id="dx"></span></label>
                        <label for="dy"><span id="dy"></span></label>
                        <label for="where"><span id="where"></span></label>
                    </p>
                    <p class="pb60">
                        <button class="btn-radius-solid" id="start" onclick="startAnimation()">Start</button>
                        &emsp;&emsp;&nbsp;&nbsp;
                        <button class="btn-radius-solid" id="stop" onclick="stopAnimation()">Stop</button>
                        &emsp;&emsp;&emsp;
                        reset&nbsp;
                        <input type="checkbox" id="cb_reset" onclick="handleCheckbox(this.checked)" checked>
                    </p>
                    ...以下、省略
                </div>
            </div>
        </div>
    </div>
</BODY>
</html>
JavaScript
javascript
コードをコピーする
// user define 関連
var formula_dx;
var formula_dy;
var node_dx;
var node_dy;

function startAnimation() {
    // 20240513 add for user definition
    formula_dx = document.getElementById('dxdt').value;
    formula_dy = document.getElementById('dydt').value;
    // 式を表示する
    node_dx = math.parse(formula_dx);
    node_dy = math.parse(formula_dy);

    var dyTex = "\\[ \\frac{dy}{dt} = " + node_dy.toTex() + "\\]";

    // 長い式を分割
    var maxLineLength = 50; // 最大文字数（調整可能）
    var splitTex = splitLongTex(dyTex, maxLineLength);

    document.getElementById('dx').innerText = "\\[ \\frac{dx}{dt} = " + node_dx.toTex() + "\\]";
    document.getElementById('dy').innerHTML = splitTex;
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
}

function splitLongTex(tex, maxLineLength) {
    var result = '';
    var currentLine = '';
    var words = tex.split(' ');

    words.forEach(function(word) {
        if ((currentLine + word).length > maxLineLength) {
            result += currentLine + '<br>';
            currentLine = word + ' ';
        } else {
            currentLine += word + ' ';
        }
    });

    result += currentLine;
    return result;
}
CSS
css
コードをコピーする
div#main990 { width: 990px; margin-left: auto; margin-right: auto; text-align: center; border: 0px solid #FF9900; }
.pic-left990 { width: 990px; text-align: left; margin-right: auto; }
.contents-2col-left { display: inline-block; * display: inline; * zoom: 1; vertical-align: middle; padding-right: 20px; }
.contents-2col-right { display: inline-block; * display: inline; * zoom: 1; vertical-align: middle; width: 400px; word-wrap: break-word; overflow-wrap: break-word; }
/* テキストエリア 複数入力 */
.input-container {
    display: flex;
    align-items: flex-start; /* ラベルを上に揃える */
}
.input-container label {
    width: 60px; /* ラベルの幅を固定 */
    display: inline-block;
    margin-top: -2px; /* テキストエリアとの垂直位置を調整 */
}
.input-container textarea {
    resize: none; /* テキストエリアのサイズ変更を無効化 */
    width: 310px; /* テキストエリアの幅を指定 */
    text-align: left;
}
この修正で、長い式が右側に表示される際に折り返されるようになり、レイアウトの崩れを防ぐことができるはずです。引き続き問題がある場合は、お気軽にご質問ください。

方法3についてです。jsでは
document.getElementById('dy').innerHTML = splitTex;
の右辺splitTexには第1項と第2項の間に<br>がセットされていることを確認しました。
ところが、htmlでは改行されずに1行で表示されています。
ChatGPT
お知らせいただきありがとうございます。MathJaxを使用している場合、改行タグ（<br>）が正しく処理されないことが原因である可能性が高いです。

MathJaxを使って複数行の数式を表示するために、aligned環境を使用することができます。これにより、数式を複数行に分けて表示することができます。

JavaScriptの修正
以下に、JavaScriptのコードを修正して、aligned環境を使用する方法を示します。

javascript
コードをコピーする
function startAnimation() {
    // 20240513 add for user definition
    formula_dx = document.getElementById('dxdt').value;
    formula_dy = document.getElementById('dydt').value;
    // 式を表示する
    node_dx = math.parse(formula_dx);
    node_dy = math.parse(formula_dy);

    var dyTex = "\\[ \\frac{dy}{dt} = " + node_dy.toTex() + "\\]";

    // 長い式を分割
    var maxLineLength = 50; // 最大文字数（調整可能）
    var splitTex = splitLongTex(dyTex, maxLineLength);

    document.getElementById('dx').innerText = "\\[ \\frac{dx}{dt} = " + node_dx.toTex() + "\\]";
    document.getElementById('dy').innerHTML = splitTex;
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
}

function splitLongTex(tex, maxLineLength) {
    var result = '\\[ \\begin{aligned}';
    var currentLine = '';
    var words = tex.split(' ');

    words.forEach(function(word) {
        if ((currentLine + word).length > maxLineLength) {
            result += currentLine + ' \\\\ ';
            currentLine = word + ' ';
        } else {
            currentLine += word + ' ';
        }
    });

    result += currentLine + '\\end{aligned} \\]';
    return result;
}
補足
上記のコードでは、splitLongTex関数がMathJaxのaligned環境を使用して、長い数式を複数行に分割します。これにより、長い数式がページのレイアウトを崩さずに表示されるようになります。

変更箇所のポイント
splitLongTex関数で、結果をaligned環境でラップします。
\\を使用して改行を挿入します。
これで長い数式が複数行にわたって表示されるはずです。もう一度確認していただけますか？もしまだ問題が解決しない場合は、さらにサポートいたします。

確認してみましたが、改行されません。
ChatGPT
MathJaxで改行を有効にするためには、少し工夫が必要です。MathJaxのaligned環境を使用する方法がうまく機能しない場合、特定の数式環境や適切なエスケープシーケンスを使う必要があります。

以下の修正コードでは、MathJaxの環境設定や数式を適切に改行するための方法を示します。

JavaScriptの修正
javascript
コードをコピーする
function startAnimation() {
    // 20240513 add for user definition
    formula_dx = document.getElementById('dxdt').value;
    formula_dy = document.getElementById('dydt').value;
    // 式を表示する
    node_dx = math.parse(formula_dx);
    node_dy = math.parse(formula_dy);

    var dyTex = "\\frac{dy}{dt} = " + node_dy.toTex();

    // 長い式を分割
    var maxLineLength = 50; // 最大文字数（調整可能）
    var splitTex = splitLongTex(dyTex, maxLineLength);

    document.getElementById('dx').innerText = "\\[ \\frac{dx}{dt} = " + node_dx.toTex() + "\\]";
    document.getElementById('dy').innerHTML = "\\[ \\begin{aligned}" + splitTex + "\\end{aligned} \\]";
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
}

function splitLongTex(tex, maxLineLength) {
    var result = '';
    var currentLine = '';
    var words = tex.split(' ');

    words.forEach(function(word) {
        if ((currentLine + word).length > maxLineLength) {
            result += currentLine + ' \\\\ ';
            currentLine = word + ' ';
        } else {
            currentLine += word + ' ';
        }
    });

    result += currentLine;
    return result;
}
ポイント
node_dy.toTex()から生成されたTeX式は、\\frac{dy}{dt} =の部分は省略してdyTexに代入します。これにより、式全体をaligned環境内に配置できます。
splitLongTex関数で生成されるresultに、適切な改行記号（\\\\）を挿入します。
innerHTMLの部分で、\\[ \\begin{aligned} ... \\end{aligned} \\]の中に式をラップします。
CSS
念のためCSSも確認してください。改行の問題は主にMathJaxの設定とJavaScriptの問題ですが、CSSも適切に設定されている必要があります。

css
コードをコピーする
div#main990  { width: 990px;  margin-left: auto;  margin-right: auto; text-align: center; border: 0px solid #FF9900; }
.pic-left990   { width:  990px; text-align:left; margin-right:auto; }
.contents-2col-left { display: inline-block; * display: inline; * zoom: 1; vertical-align: middle; padding-right: 20px; }
.contents-2col-right { display: inline-block; * display: inline; * zoom: 1; vertical-align: middle; width: 400px; word-wrap: break-word; overflow-wrap: break-word; }
/* テキストエリア 複数入力 */
.input-container {
    display: flex;
    align-items: flex-start; /* ラベルを上に揃える */
}
.input-container label {
    width: 60px; /* ラベルの幅を固定 */
    display: inline-block;
    margin-top: -2px; /* テキストエリアとの垂直位置を調整 */
}
.input-container textarea {
    resize: none; /* テキストエリアのサイズ変更を無効化 */
    width: 310px; /* テキストエリアの幅を指定 */
    text-align: left;
}
上記の修正で問題が解決するか確認してください。もしまだ改行が機能しない場合は、さらに詳しいデバッグを行い、根本的な原因を特定する必要があります。

htmlでは以下のように表示されています。
\begin{aligned}\[ \frac{dy}{dt} =  x\cdot\left(1-2\cdot  \\ x\cdot x-2\cdot y\cdot y\right)+  \\ y\cdot\left(2\cdot x\cdot x+2\cdot y\cdot  \\ y+1\right)\cdot\left(\left( x\cdot x+ y\cdot  \\ y\right)^{2}-\left( x\cdot x- y\cdot  \\ y\right)\right)
ChatGPT
問題を特定し、適切に改行するためには、MathJaxの構文を正確に使用する必要があります。前述の問題は、式全体が不適切なラッピングによって表示されることが原因です。ここでは、MathJaxを使って数式を適切に改行するための方法を提案します。

JavaScriptの修正
splitLongTex関数で分割された数式部分をMathJaxのaligned環境に正しく挿入します。
そのためには、最初にdyTexから\\[と\\]を除去し、その内容のみを扱います。
以下に修正したJavaScriptのコードを示します。

javascript
コードをコピーする
function startAnimation() {
    // 20240513 add for user definition
    formula_dx = document.getElementById('dxdt').value;
    formula_dy = document.getElementById('dydt').value;
    // 式を表示する
    node_dx = math.parse(formula_dx);
    node_dy = math.parse(formula_dy);

    var dyTex = "\\frac{dy}{dt} = " + node_dy.toTex();

    // 長い式を分割
    var maxLineLength = 50; // 最大文字数（調整可能）
    var splitTex = splitLongTex(dyTex, maxLineLength);

    document.getElementById('dx').innerText = "\\[ \\frac{dx}{dt} = " + node_dx.toTex() + "\\]";
    document.getElementById('dy').innerHTML = "\\[ \\begin{aligned}" + splitTex + "\\end{aligned} \\]";
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
}

function splitLongTex(tex, maxLineLength) {
    var result = '';
    var currentLine = '';
    var words = tex.split(' ');

    words.forEach(function(word) {
        if ((currentLine + word).length > maxLineLength) {
            result += currentLine + ' \\\\ ';
            currentLine = word + ' ';
        } else {
            currentLine += word + ' ';
        }
    });

    result += currentLine;
    return result;
}
HTMLの例
HTML部分は変更する必要はありませんが、全体のコードの流れを確認するために含めています。

html
コードをコピーする
<!DOCTYPE HTML>
<html>
<HEAD>
    <META charset="UTF-8">
    <title>Differential Equations</title>
    <!-- js start -->
    <!-- Math.js -->
    <script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.4.4/math.js">
    </script>
    <script type="text/javascript"
        src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            TeX: { equationNumbers: { autoNumber: "AMS" }},
            tex2jax: {
                inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                processEscapes: true
            },
            "HTML-CSS": { matchFontHeight: false },
            displayAlign: "left",
            displayIndent: "2em"
        });
    </script>
    <!-- deq initialize -->
    <script src="libs/etc/js/deq00_v4.js" type="text/javascript"></script>
    <!-- js end -->
</HEAD>
<BODY id="common-k" onload="initialize()">
    <div id="container">
        <div id="main990"> <!-- page main: start -->
            <!-- title -->
            <div id="title20">
                <h3 class="pt30 pb20">
                    微分方程式 解曲線の描画
                </h3>
            </div>
            <!-- contents -->
            <div class="pic-left990 pb30">
                <div class="contents-2col-left">
                    <p class="pb15" align="right">
                        <select id="type" onchange="changeType()">
                            <option value="09&09">&emsp;&emsp;[99] ユーザー定義</option>
                        </select>
                    </p>
                    <p class="pb10">
                        <canvas id="graphCanvas" width="580" height="580" style="border: 1px solid #000;"></canvas>
                    </p>
                    <p class="pb10" align="right">
                        近似方法
                        <select id="mode" onchange="changeMode()">
                            <option value="1">&emsp;&emsp;Euler法</option>
                            <option value="2">&emsp;&emsp;修正Euler法</option>
                            <option value="3">&emsp;&emsp;Runge-Kutta法</option>
                        </select>
                    </p>
                </div>
                <!-- deq javascript呼び出し -->
                <script src="libs/etc/js/deq01_v4.js" type="text/javascript"></script>
                <div class="contents-2col-right">
                    <p>方程式</p>
                    <!-- 入力ボックス -->
                    <p class="pb10 input-container">
                        <label id="l_dxdt">$dx / dt = $</label>
                        <textarea id="dxdt" cols="30" rows="2">y * (1 + 2 * x*x + 2 * y*y)</textarea>
                    </p>
                    <p class="pb10 input-container">
                        <label id="l_dydt">$dy / dt = $</label>
                        <textarea id="dydt" cols="30" rows="2">x * (1 - 2 * x*x - 2 * y*y) + y * (2 * x*x + 2 * y*y + 1) * (pow(x*x + y*y, 2) - (x*x - y*y))</textarea>
                    </p>
                    <!-- 方程式の表示(TeX) -->
                    <p class="pb10">
                        <label for="dx"><span id="dx"></span></label>
                        <label for="dy"><span id="dy"></span></label>
                        <label for="where"><span id="where"></span></label>
                    </p>
                    <p class="pb60">
                        <button class="btn-radius-solid" id="start" onclick="startAnimation()">Start</button>
                        &emsp;&emsp;&nbsp;&nbsp;
                        <button class="btn-radius-solid" id="stop" onclick="stopAnimation()">Stop</button>
                        &emsp;&emsp;&emsp;
                        reset&nbsp;
                        <input type="checkbox" id="cb_reset" onclick="handleCheckbox(this.checked)" checked>
                    </p>
                    ...以下、省略
                </div>
            </div>
        </div>
    </div>
</BODY>
</html>
これで、長い数式が適切に改行されて表示されるはずです。MathJaxの設定に関しても、この方法で期待通りに動作するかを確認してください。

    ありがとうございます。折り返しは確認できました。
    折り返しはできたのですが、ぶつ切りになっています。
    dxdt=y⋅(1+2⋅x⋅x+2⋅y⋅y)

        dydt=x⋅(1−2⋅x
        ⋅x−2⋅y⋅y)+y⋅(2
        ⋅x⋅x+2⋅y⋅y+1)⋅((
        x⋅x+y⋅y)2−(x⋅x−
        y⋅y))


    gy/dtが印伝としているのと、
    できれば、こんな感じで折り返すことができればと思います。

    dxdt=y⋅(1+2⋅x⋅x+2⋅y⋅y)

    dydt=x⋅(1−2⋅x⋅x−2⋅y⋅y)+
                y⋅(2⋅x⋅x+2⋅y⋅y+1)⋅((x⋅x+y⋅y)2−(x⋅x−y⋅y))

ChatGPT
折り返しを適切に制御するためには、式の自然な区切り目で改行する必要があります。例えば、数式の演算子や括弧のところで改行することが望ましいです。これを行うために、より高度な文字列処理が必要です。

以下のJavaScriptコードは、式を自然な区切り目で改行するための処理を含んでいます。

JavaScriptの修正
javascript
コードをコピーする
function startAnimation() {
    // 20240513 add for user definition
    formula_dx = document.getElementById('dxdt').value;
    formula_dy = document.getElementById('dydt').value;
    // 式を表示する
    node_dx = math.parse(formula_dx);
    node_dy = math.parse(formula_dy);

    var dxTex = "\\frac{dx}{dt} = " + node_dx.toTex();
    var dyTex = "\\frac{dy}{dt} = " + node_dy.toTex();

    // 長い式を分割
    var maxLineLength = 50; // 最大文字数（調整可能）
    var splitDxTex = splitLongTex(dxTex, maxLineLength);
    var splitDyTex = splitLongTex(dyTex, maxLineLength);

    document.getElementById('dx').innerHTML = "\\[ " + splitDxTex + "\\]";
    document.getElementById('dy').innerHTML = "\\[ " + splitDyTex + "\\]";
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
}

function splitLongTex(tex, maxLineLength) {
    var result = '';
    var currentLine = '';
    var characters = tex.split('');

    characters.forEach(function(char) {
        if (currentLine.length >= maxLineLength && (char === '+' || char === '-' || char === '*' || char === '/')) {
            result += currentLine + ' \\\\ ';
            currentLine = char;
        } else if (currentLine.length >= maxLineLength && char === ')') {
            result += currentLine + char + ' \\\\ ';
            currentLine = '';
        } else {
            currentLine += char;
        }
    });

    result += currentLine;
    return result;
}
説明
splitLongTex関数は文字列を1文字ずつ処理し、+, -, *, /または閉じ括弧)で適切に改行します。
startAnimation関数で、dxおよびdyの数式を分割し、適切なMathJaxのタグでラップします。
テストするHTMLの例
HTML部分は特に変更は必要ありませんが、以下に全体の流れを示します。

html
コードをコピーする
<!DOCTYPE HTML>
<html>
<HEAD>
    <META charset="UTF-8">
    <title>Differential Equations</title>
    <!-- js start -->
    <!-- Math.js -->
    <script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.4.4/math.js">
    </script>
    <script type="text/javascript"
        src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            TeX: { equationNumbers: { autoNumber: "AMS" }},
            tex2jax: {
                inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                processEscapes: true
            },
            "HTML-CSS": { matchFontHeight: false },
            displayAlign: "left",
            displayIndent: "2em"
        });
    </script>
    <!-- deq initialize -->
    <script src="libs/etc/js/deq00_v4.js" type="text/javascript"></script>
    <!-- js end -->
</HEAD>
<BODY id="common-k" onload="initialize()">
    <div id="container">
        <div id="main990"> <!-- page main: start -->
            <!-- title -->
            <div id="title20">
                <h3 class="pt30 pb20">
                    微分方程式 解曲線の描画
                </h3>
            </div>
            <!-- contents -->
            <div class="pic-left990 pb30">
                <div class="contents-2col-left">
                    <p class="pb15" align="right">
                        <select id="type" onchange="changeType()">
                            <option value="09&09">&emsp;&emsp;[99] ユーザー定義</option>
                        </select>
                    </p>
                    <p class="pb10">
                        <canvas id="graphCanvas" width="580" height="580" style="border: 1px solid #000;"></canvas>
                    </p>
                    <p class="pb10" align="right">
                        近似方法
                        <select id="mode" onchange="changeMode()">
                            <option value="1">&emsp;&emsp;Euler法</option>
                            <option value="2">&emsp;&emsp;修正Euler法</option>
                            <option value="3">&emsp;&emsp;Runge-Kutta法</option>
                        </select>
                    </p>
                </div>
                <!-- deq javascript呼び出し -->
                <script src="libs/etc/js/deq01_v4.js" type="text/javascript"></script>
                <div class="contents-2col-right">
                    <p>方程式</p>
                    <!-- 入力ボックス -->
                    <p class="pb10 input-container">
                        <label id="l_dxdt">$dx / dt = $</label>
                        <textarea id="dxdt" cols="30" rows="2">y * (1 + 2 * x*x + 2 * y*y)</textarea>
                    </p>
                    <p class="pb10 input-container">
                        <label id="l_dydt">$dy / dt = $</label>
                        <textarea id="dydt" cols="30" rows="2">x * (1 - 2 * x*x - 2 * y*y) + y * (2 * x*x + 2 * y*y + 1) * (pow(x*x + y*y, 2) - (x*x - y*y))</textarea>
                    </p>
                    <!-- 方程式の表示(TeX) -->
                    <p class="pb10">
                        <label for="dx"><span id="dx"></span></label>
                        <label for="dy"><span id="dy"></span></label>
                        <label for="where"><span id="where"></span></label>
                    </p>
                    <p class="pb60">
                        <button class="btn-radius-solid" id="start" onclick="startAnimation()">Start</button>
                        &emsp;&emsp;&nbsp;&nbsp;
                        <button class="btn-radius-solid" id="stop" onclick="stopAnimation()">Stop</button>
                        &emsp;&emsp;&emsp;
                        reset&nbsp;
                        <input type="checkbox" id="cb_reset" onclick="handleCheckbox(this.checked)" checked>
                    </p>
                    ...以下、省略
                </div>
            </div>
        </div>
    </div>
</BODY>
</html>
この修正により、数式が自然な場所で改行され、見やすい形で表示されるはずです。



どういたしまして！お役に立てて嬉しいです。数式の分割に関しては、例えば演算子や括弧のペアリングを基にして自然な区切り目を選ぶと良いかもしれません。以下に少しだけアドバイスを追加します。

さらに改善するためのヒント
演算子を基にした分割:

演算子の後に改行を入れるのが一般的です。特に、+, -, *, /などの主要な演算子の後に改行を入れると良いでしょう。
括弧のペアリング:

括弧のペアリングに気を付けて、閉じ括弧(と開き括弧)のペアが正しく保たれるようにします。
関数呼び出しの分割:

関数名やその引数の間に改行を入れないようにします。
パラメータの調整:

maxLineLengthの値を調整して、表示のバランスを取ります。
改良した関数の例
以下の例は、上記のアドバイスに基づいて演算子と括弧を考慮した分割を行う関数です。

javascript
コードをコピーする
function splitLongTex(tex, maxLineLength) {
    var result = '';
    var currentLine = '';
    var brackets = 0;
    var characters = tex.split('');

    characters.forEach(function(char, index) {
        if (char === '{' || char === '(') {
            brackets++;
        } else if (char === '}' || char === ')') {
            brackets--;
        }

        if (currentLine.length >= maxLineLength && (char === '+' || char === '-' || (char === '*' && characters[index + 1] !== '*') || char === '/') && brackets === 0) {
            result += currentLine + ' \\\\ ';
            currentLine = char;
        } else if (currentLine.length >= maxLineLength && (char === '}' || char === ')') && brackets === 0) {
            result += currentLine + char + ' \\\\ ';
            currentLine = '';
        } else {
            currentLine += char;
        }
    });

    result += currentLine;
    return result;
}


20240519

先ほど示して頂いた式をもう一度、以下に示します。

html
<p>方程式</p>
<!-- 入力ボックス -->
<p class="pb10 input-container">
    <label id="l_dxdt">$dx / dt = $</label>
    <textarea id="dxdt" cols="30" rows="2">y * (1 + 2 * x*x + 2 * y*y)</textarea>
</p>
<p class="pb10 input-container">
    <label id="l_dydt">$dy / dt = $</label>
    <textarea id="dydt" cols="30" rows="2">x * (1 - 2 * x*x - 2 * y*y) + y * (2 * x*x + 2 * y*y + 1) * (pow(x*x + y*y, 2) - (x*x - y*y))</textarea>
</p>
<!-- 方程式の表示(TeX) -->
<p class="pb10">
    <label for="dx"><span id="dx"></span></label>
    <label for="dy"><span id="dy"></span></label>
    <label for="where"><span id="where"></span></label>
</p>

javascript

function startAnimation() {
    // 20240513 add for user definition
    formula_dx = document.getElementById('dxdt').value;
    formula_dy = document.getElementById('dydt').value;
    // 式を表示する
    node_dx = math.parse(formula_dx);
    node_dy = math.parse(formula_dy);

    var dxTex = "\\frac{dx}{dt} = " + node_dx.toTex();
    var dyTex = "\\frac{dy}{dt} = " + node_dy.toTex();

    // 長い式を分割
    var maxLineLength = 50; // 最大文字数（調整可能）
    var splitDxTex = splitLongTex(dxTex, maxLineLength);
    var splitDyTex = splitLongTex(dyTex, maxLineLength);

    document.getElementById('dx').innerHTML = "\\[ " + splitDxTex + "\\]";
    document.getElementById('dy').innerHTML = "\\[ " + splitDyTex + "\\]";
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
}

function splitLongTex(tex, maxLineLength) {
    var result = '';
    var currentLine = '';
    var characters = tex.split('');

    characters.forEach(function(char, index) {
        if (char === '{' || char === '(') {
            brackets++;
        } else if (char === '}' || char === ')') {
            brackets--;
        }

        if (currentLine.length >= maxLineLength && (char === '+' || char === '-' || (char === '*' && characters[index + 1] !== '*') || char === '/') && brackets === 0) {
            result += currentLine + ' \\\\ ';
            currentLine = char;
        } else if (currentLine.length >= maxLineLength && (char === '}' || char === ')') && brackets === 0) {
            result += currentLine + char + ' \\\\ ';
            currentLine = '';
        } else {
            currentLine += char;
        }
    });

    result += currentLine;
    return result;
}

綺麗に分割できるようになりました。
ただ、分割された式がhtmlのページでは右寄せで表示されてしまいます。

dx/dt = y * (1 + 2 * x^2 + 2 * y^2)
               dy/dt = x * (1 - 2 * x^2 - 2 * y^2)
               + y * ((2 * x^2 + 2 * y^2 + 1) * (x^2 + y^2)^2 - (x^2 - y^2))

できれば、以下のような表示を期待しています。

dx/dt = y * (1 + 2 * x^2 + 2 * y^2)
dy/dt = x * (1 - 2 * x^2 - 2 * y^2) +
        y * ((2 * x^2 + 2 * y^2 + 1) * (x^2 + y^2)^2 - (x^2 - y^2))

これは、可能でしょうか？


20240521

htmlとjavascriptについての質問です。

入力フォームで数式を入力し、その式をjs側のmath.jsでevaluateして
そのグラフをプロットするための処理を行っています。

例えば、数式が以下の通りだったとします。
-y + 10 * x * exp(-1 / sqrt(sqrt(x*x + y*y))) * sin(1 / sqrt(x*x + y*y))
ここで
sqrt(x*x + y*y)が複数回使われているので、
r = sqrt(x*x + y*y)
と、rに置換します。

置換前
入力ボックス dx/dt = [-y + 10 * x * exp(-1 / sqrt(sqrt(x*x + y*y))) * sin(1 / sqrt(x*x + y*y))]

置換後、
入力ボックス dx/dt = [-y + 10 * x * exp(-1 / sqrt(r)) * sin(1 / r)]
入力ボックス   where,  r = [sqrt(x*x + y*y)]

置換前のhtmlとjsの処理を示します。

html

<!-- 入力ボックス -->
<p class="pb10 input-container">
    <label id="l_dxdt">$dx / dt = $</label>
    <textarea id="dxdt" cols="30" rows="2">-y + 10 * x * exp(-1 / sqrt(sqrt(x*x + y*y))) * sin(1 / sqrt(x*x + y*y))</textarea>
</p>

<!-- 方程式の表示(TeX) -->
<p class="pb10">
    <!---->
    <label for="dx"><span id="dx"></span></label>
</p>

js
    var formula_dx;

    function startAnimation() {
        if (dat == 99) {
            formula_dx = document.getElementById('dxdt').value;
        }
    }

    function FNF(dt, x, y) {
        let FNF;
        switch (dat)
        {
            case 99:
                FNF = f(dt, x, y);
                return FNF;
    }

    function f(dt, x, y) {
        return math.evaluate(formula_dx, { dt: dt, x: x, y: y });
    }

置換後のhtmlは以下の通りです。

<!-- 入力ボックス -->
<p class="pb10 input-container">
    <label id="l_dydt">$dy / dt = $</label>
    <textarea id="dydt" cols="30" rows="2">-y + 10 * x * exp(-1 / sqrt(r)) * sin(1 / r)</textarea>
</p>
<p class="pb10 input-container2">
    <label id="l_where">$\quad$ where, $\quad r = $</label>
    <textarea id="dxdy_where" cols="30" rows="1">sqrt(x^2 + y^2)</textarea>
</p>

<!-- 方程式の表示(TeX) -->
<p class="pb10">
    <!---->
    <label for="dx"><span id="dx"></span></label>
    <label for="dy"><span id="dy"></span></label>
    <label for="where"><span id="where"></span></label>
</p>

置換後のjsで"r"をどのように処理すれば良いでしょうか？
もし、質問に不明の点があれば、ご指摘下さい。


20240522

微分方程式についての質問です。
y = CX^2 (C: 定数)を微分して、
y' = dy/dx = 2Cx
ここからCを消去すると、以下のようになると解説されていました。
xy' = 2y
何故、こうなるのでしょうか？

ChatGPT
微分方程式に関するご質問ありがとうございます。
定数 C を消去する:
ここで
C を消去するために、与えられた式を利用する
C = y / x^2
これを、微分式に代入する:
y' = 2(y/x^2)x
整理して
y' = 2y/x

なるほど。頭を柔らかくしなければダメですね。
ありがとうございました。




