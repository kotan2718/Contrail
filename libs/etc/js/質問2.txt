翻訳について質問です。
以下の文を英語に訳して頂くことは、できますか？

このツールは2次元の微分方程式の解曲線を描画します。
割と簡単そうな方程式でも解析的に解くには結構骨が折れるし、
そもそも解析的に解くことができない場合もあります。
そこで、微分方程式をそのまま利用して近似解をwebで簡単に描画するツールを作りました。
近似は基本的に4次のrunge-kutta法で行っていますが、Euler法と修正Euler法も選択できます。
初期値は、第1象限にランダムに16点を選び、残りの3象限に反転コピーしています。
計64点を初期値として、一斉に描画が開始されます。

描画が開始されると現れる青色のラインは、初期値から通常の時間経過を経て描画されます。
しばらくすると、黄色いラインが現れます。こちらは初期値から時間を遡って描画されます。
青と黄色のラインの動きを観察することで、解曲線の性質を知ることができます。

それでは、セレクトボックスに表示されるタイトルに従って、ざっくりと説明します。
以下の説明は、森本光生氏の「パソコンによる微分方程式」からの引用を基にしています。

2次元1次線形自励系
2次元2次線形自励系
高次同時自励系01

係数入力ボックス $a, b, c, d$ に値を設定することで、
様々な解曲線が動的に描画されます。
試しに、以下の例の値を設定してみて下さい。
説明に沿った解曲線が描画されると思います。

ここで、$a, b, c, d$ は実数で 全ては0でないとして、
実係数の2次の正方行列Aを導入します。

Aの固有値を lambda_1, lambda_2とします。<br>
以下の説明で、「固有値に対応する直線」という表現が出てきますが、
これは各固有値の固有空間を意味しています。2行2列の正方行列の場合、
固有空間は一般に原点を通る直線になります。

固有値の1つが0の場合

lambda_1 = 0, lambda_2 = 3 > 0 より、
解曲線は lambda_2に対応する直線 y = 2x に平行な半直線で、
その出発点は lambda_1 に対応する直線 y = -x 上の各点であり、無限遠に向かう。

lambda_1 = 0, lambda_2 < 0 の場合、解曲線の向きは逆になる。




引き続き、以下の文の英訳をお願いします。

固有値が lambda_1 < 0 < lambda_2 の場合 (鞍状点)

lambda_1 = -1 < 0 , lambda_2 = 2 > 0 より、
解曲線は lambda_2 に対応する直線 y = 2x に沿いながら無限遠から発し、原点方向に引き寄せられ、
あるところで lambda_1 に対応する直線 2y = x に沿うように向きを変え、無限遠に向かう。

0 < lambda_1 < lambda_2 の場合1 (不安定結節点 または 湧点)

lambda_1 = 1 > 0 , lambda_2 = 2 > 0 より、
解曲線は lambda_1 に対応する直線 y = 0 (x軸) に沿って原点から湧き出し、
lambda_2 に対応する直線 x = 0 (y軸) に沿って無限遠に向かう。

lambda_1 < lambda_2 < 0 の場合 (安定結節点 または 沈点)

lambda_1 = -10 < 0 , lambda_2 = -5 < 0 より、
解曲線は \lambda_1 に対応する直線 y = 2x に沿って無限遠から発し、
\lambda_2 に対応する直線 3y = x に沿って原点に収束する。

固有値 lambda が重根で、行列Aが対角化可能な場合。

lambda > 0 のときは (不安定退化結節点 または 退化湧点)となる。

lambda_1 = lambda_2 = 2 < 0 より、
解曲線は原点より発し、無限遠に至る半直線である。

lambda < 0 であれば、解曲線は無限遠より発して原点に至る半直線になる(安定退化結節点 または 退化沈点)。

固有値 lambda が重根で、行列Aが対角化不可能な場合。

lambda > 0 のときは (不安定退化結節点 または 退化湧点)となる。

固有値は重根で lambda = 2 であるが、行列Aは対角化できない。
解曲線は原点より発し、固有値 lambda に対応する直線 y = 0 (x軸) に沿って無限遠に至る。
(安定退化結節点 または 退化沈点)。

固有値が純虚数の場合 (渦心点)

固有値は lambda = +/- i である。
解曲線は原点を中心とする楕円軌道(周期解)を描く。

固有値が実部と虚部を持つ場合 (渦状点)

固有値は lambda = -1 +/- sqrt{2}i である。
固有値の実部が負の場合、解曲線は無限遠より発して原点の回りをらせん状に回りながら原点に至る、
安定渦状点である。

2次元2次線形自励系

係数入力ボックス a, b, c, d, e, f に値を設定することで、
様々な解曲線が動的に描画されます。
ここで、a, b, c, d, e, f は実数で 全ては0ではないとします。

森本氏の著書では、解析解を示され、解曲線の性質を詳しく解説されていますが、
ここでは、かなり端折った説明になっていることをご留意願います。

結節峠点型

直線 2y = x と x = 0 (y軸) が2つの双曲型角領域を作っている。
また直線 y = 2x に沿って4つの放物型角領域があり、そこでは解曲線がこの直線を挟んで、
原点に至る。第1象限にある放物型角領域は不安定であり、第3象限にある放物型角領域は安定である。

退化結節峠点型

直線 2y = x と x = 0 (y軸) が2つの双曲型角領域を作っている。
また直線 2y = x に沿って2つの放物型角領域がある。
第1象限にある放物型角領域は不安定であり、第3象限にある放物型角領域は安定である。

双楕円型

直線 y = 0 (x軸) が平面を2つの楕円型角領域に分けている。
解軌道は原点で x軸 に接する円周で、原点より発し、原点に至る。

3峠型

双楕円型とは1つめの式の x^2 と y^2 の符号が変わっただけであるが、
解曲線はがらっと変わったものになる。
直線 y = 0 (x軸) と y = +/- sqrt{3} によって
3つの尾根と谷が組み合わさった軌道になるため、3峠型と表現する。
3直線が平面を6つの双曲型の角領域に分離している。

結節点型 2

直線 y = 0 (x軸) と x = 0 (y軸) が2つの双曲型角領域を作っている。
また直線 y = -x に沿って4つの放物型角領域があり、そこでは解曲線がこの直線を挟んで、
原点に至る。第2象限にある放物型角領域は不安定であり、第4象限にある放物型角領域は安定である。

放物型

直線 y = -x が平面を2つの放物型角領域に分けている。
直線 y = 0 (x軸) が平面を2つの楕円型角領域に分けている。
解軌道は直線を挟んで、その向きが逆になる。

高次の同次自励系

高次の自励形以降は、係数の入力はできません。事情はお察し頂けると思います。
最終的には、web上で自由に方程式を定義して、その解曲線を描画するページにしたいと思っていますが、
まだ先の話になりそうです。
今のところは森本氏の著書に紹介されている方程式を紹介したいと思います。

周期解を持つ同次自励形

8つの放物型角領域を持つ同次自励形

直線 y = +/- x と x, y 軸 によって、平面は8つの放物型角領域に分けられる。

複合角領域を持つ同次自励形

直線 2y = (3 +/- sqrt{5})x と x, y 軸 によって、
平面は8つの角領域に分けられる。双曲型と楕円型の角領域をそれぞれ2つ持ち、
放物型角領域を4つ持つ。

Vinogradの自励形

前出の複合角領域を持つ同次自励形の dx/dt の右辺に y^5 が加わったものだが、
y = 0 (x軸) を境に点対称の形でムンクの叫びを連想させる楕円型角領域が現れる。
///////

以上です。よろしくお願いします。



20240307

以下の文の英訳をお願いします。

微分方程式(2次元)の解軌道を描画するページを公開しました。<br>
ページ内で方程式を選択すると、動的に解軌道を描画します。<br>
元々はc#で描画ツールを組んでいたのですが、webで直接描画できるようにしたいと思って、
javascriptで組み直しました。ただ、私は10年位前にほんの少しjavascriptに触れただけで、
あれ? これ、どうするんだっけ? という箇所が幾つか出てきました。<br>
そこで、チャットGTPを利用しました。チャットGTPの利用でコーディング中に調べるための時間を
相当節約することができたことを、ここに明記しておきます。

このページで紹介している方程式は、<a href="https://www.asakura.co.jp/author_books.php?author_code=48217" target="_blank">森本光生氏の「パソコンによる微分方程式」</a>からの引用を基にしています。
森本氏が紹介されている方程式は、まだ沢山あるのですが、私の方で確認が進んでいません。
確認が終わりましたら、少しずつ増やして行きたいと思っています。

以下のリンクは簡単な解説のページです。それぞれの方程式の解説箇所にある「描画へ」をクリックすると、
描画に必要なデータがセットされた状態で描画ページ遷移します。
[START]ボタンをクリックすることで解曲線の描画が始まります。<br>
 [E.T.C.] - <a href="etc_DEQ_doc2.html">微分方程式 解曲線の描画 簡易解説</a>

以下のリンクは描画ページに直接ジャンプします。
セレクトボックスから方程式を選択して、[Start]ボタンをクリックすることで解曲線の描画が始まります。<br>
 [E.T.C.] - <a href="etc_DEQ_v2.html">微分方程式 解曲線の描画</a>

描画ページでは、以下の設定ができます。<br>
1. 係数(変更できるパラメーターはそれぞれの方程式によって異なります)<br>
2. 描画範囲<br>
3. 刻み幅(経過時間の幅)<br>
4. 繰返し回数(刻み幅の実行回数)<br>
5. 近似方法(Euler法、修正Euler法、4次runge-kutta法)<br>



微分方程式(3次元)の解軌道を描画するページを公開しました。<br>
ページ内で方程式を選択すると、動的に解軌道を描画します。<br>
微分方程式(3次元)版と同様の箇所で、チャットGTPを利用したことを明記しておきます。

このページで紹介している方程式は、解軌道がカオス的なものを中心としています。
面白い方程式を見つけたら、サンプルを増やして行きたいと思っています。

以下のリンクは簡単な解説のページです。それぞれの方程式の解説箇所にある「描画へ」をクリックすると、
描画に必要なデータがセットされた状態で描画ページ遷移します。
[START]ボタンをクリックすることで解曲線の描画が始まります。<br>
描画終了後は、Angle、Vertical Axisを変更することで、いろいろな角度から解軌道を観察することができます。<br>
 [E.T.C.] - <a href="etc_DEQ_doc3.html">微分方程式 3D 解軌道の描画 簡易解説</a>

以下のリンクは描画ページに直接ジャンプします。
セレクトボックスから方程式を選択して、[Start]ボタンをクリックすることで解軌道の描画が始まります。<br>
描画終了後は、Angle、Vertical Axisを変更することで、いろいろな角度から解軌道を観察することができます。<br>
 [E.T.C.] - <a href="etc_DEQ_v3.html">微分方程式 3D 解軌道の描画</a>

描画ページでは、以下の設定ができます。<br>
1. 係数(変更できるパラメーターはそれぞれの方程式によって異なります)<br>
2. 描画範囲<br>
3. 刻み幅(経過時間の幅)<br>
4. 繰返し回数(刻み幅の実行回数)<br>
5. 初期値(2点指定できます)<br>
6. Angle(左右、上下)<br>
7. Vertical Axis(デフォルトはz軸ですが、x軸とy軸も選べます)


微分方程式 解軌道の描画 3D

簡易解説

このツールは3次元の微分方程式の解軌道を描画します。
2次元でも不思議な軌道を描く方程式がありますが、
3次元になると、一見簡単そうな方程式でも
特定のパラメータと初期値によってカオス的な解軌道を描くものがあります。
解は有界であるのに何とも気まぐれな軌道を持つ方程式です。
ネットで調べて、不思議な性質を持つ方程式を集めてみました。
解軌道の描画は、4次のrunge-kutta法で近似を行っています。
初期値として2点を指定し、時間経過に伴う軌道を動的に描画していきます。

描画が終了すると、アングルと垂直軸を変更することで、様々な角度から解軌道を観察することができます。

それでは、セレクトボックスに表示されるタイトルに従って、ざっくりと説明します。
と、言いたいところですが、私にはとてもそのような知識はないので、本当に簡単なコメントと、
方程式が紹介されているサイトのurlを記すことにします。

私がLorenz modelを初めて知ったのは、1980年代の後半です。
カオスとかフラクタルがはやった頃です。
ブルーバックスでこの方程式についてのかなり詳しい説明を読んだことがあり、
<a href="https://www.asakura.co.jp/author_books.php?author_code=48217" target="_blank">森本光生氏の「パソコンによる微分方程式」</a>に載っていた描画プログラムを
3次元版に拡張して描画させた記憶があります。N88-BASICってご存じですか(^^;。

Lorenz modelが有名になったのは、解を得るための初期値がほんの少し違っただけで、
有界であるにも関わらず、全く思いにもよらない軌道を描くことの初期値鋭敏性について、バタフライエフェクトとして知られるようになったことだと思います。
最近では、NHKがやたらにバラフライエフェクトを連発していますが...

Lorenz modelについては、検索すればいくらでもヒットします。一応、下記のサイトを挙げておきます。

パラメーターは$a = 10.0, b = 28.0, c = 8.0 / 3.0$ のパターンがよく知られています。
このツールでも、デフォルトでこの値を使用しています。<br>
初期値は(0, 1, 2)、(0, 1, 2.01)としています。


この式がカオスになるとはにわかには信じられませんが、カオスになってしまいます。

Thomas modelについては、下記のサイトを参照してください。

このツールでは、パラメーターは$a = 0.208186$ 、初期値は $(x, y, z) = (0, 1, 2)、(0, 1, 2.01)$ としています。


Lorenz modelが2つ合体したような軌道が描かれます。
この方程式が紹介されている最初に見つけたサイトを参考にしたのですが、
他のサイトで紹介されているFour-Wingの式とは若干異なります。
しかし、実際に描画すれば、まさにFour-Wingです。

Four-Wingについては、下記のサイトが最初に見つけたページです。

ツールでは、パラメーターは$a = 0.2, b = 0.01, c= -0.4$ 、初期値は $(x, y, z) = (0, 1, 2)、(0, 1, 2.01)$ としています。


この式もThomasモデルと似た感じで、かなり規則的な変化をしていますが、カオスになります。

Halvorsen modelについては、下記のサイトを参照してください。

ツールでは、パラメーターは$a = 1.499$ 、初期値は $(x, y, z) = (0, 1, 2)、(0, 1, 2.01)$ としています。


この式もThomasモデルと似た感じで、かなり規則的な変化をしています。やはりカオスになります。


カオス解になるようですが、初期値による鋭敏性は見られないと思います。


解軌道は3つのアトラクターを複雑に動きます。Lorenz model同様に、初期値鋭敏性が見られます。


以上です。よろしくお願いします。
そして、翻訳して頂いた英文を、もう一度日本語に訳して頂けますか？

面倒くさいお願いですが、よろしくお願いします。



I have published a page for drawing solution trajectories of (2-dimensional) differential equations. When you select an equation on the page, it dynamically plots the solution trajectory. Originally, I had built a drawing tool in C#, but I wanted to directly draw on the web, so I rewrote it in JavaScript. However, I only had minimal experience with JavaScript about 10 years ago, and I encountered several "Hmm, how do I do this again?" moments. So, I utilized ChatGPT. I want to explicitly mention here that using ChatGPT significantly saved me time in looking up things while coding.
微分方程式（2次元）の解の軌跡を描くためのページを公開しました。
ページ上で方程式を選択すると、解の軌跡が動的に描かれます。
もともと私はC#で描画ツールを組んでいましたが、直接Web上で描画できるようにしたく、JavaScriptで書き直しました。
ただし、私は10年ほど前にほんの少しJavaScriptに触れただけで、
「これ、どうやるんだっけ？」という部分がいくつかありました。
そこでChatGPTを利用しました。
ChatGPTの利用により、コーディング中に調べるための時間をかなり節約できたことをここに明記しておきます。

The equations featured on this page are based on excerpts from "Differential Equations on Personal Computers" by Mitsuo Morimoto. Although Morimoto has introduced many equations, I haven't completed confirmation on my end yet. Once confirmed, I intend to gradually add them.
このページで紹介している方程式は、光生氏の「パソコンによる微分方程式」からの引用を基にしています。
光生氏が紹介している方程式はまだたくさんありますが、私の方で確認が進んでいません。
確認が終わったら、少しずつ追加していきたいと思っています。

Below are links to explanatory pages:
Clicking "To Plot" in the explanation section of each equation will transition you to the drawing page with the necessary data set for plotting. Clicking the [START] button begins plotting the solution curves.
以下は簡単な解説ページへのリンクです。
各方程式の解説部分で「描画へ」をクリックすると、描画に必要なデータがセットされた状態で描画ページに遷移します。
[START]ボタンをクリックすることで解曲線の描画が始まります。

[E.T.C.] - Drawing Solution Trajectories of Differential Equations: Simplified Explanation
[E.T.C.] - 微分方程式 解曲線の描画 簡易解説


The following link directly jumps to the drawing page:
Select an equation from the dropdown box and click [Start] to begin drawing the solution trajectory.
以下のリンクは描画ページに直接ジャンプします。セレクトボックスから方程式を選択し、[Start]ボタンをクリックすることで解曲線の描画が始まります。

[E.T.C.] - Drawing Solution Trajectories of Differential Equations
[E.T.C.] - 微分方程式 解曲線の描画

On the drawing page, you can configure the following settings:

Coefficients (modifiable parameters vary for each equation)
Plotting range
Increment width (width of elapsed time)
Iteration count (number of executions of the increment width)
Approximation method (Euler's method, Modified Euler's method, 4th Order Runge-Kutta method)

I have also published a page for drawing solution trajectories of (3-dimensional) differential equations. It operates similarly to the 3D version of the differential equation (DE) page, and I want to note that I utilized ChatGPT in the same manner.

The equations showcased on this page primarily focus on chaotic trajectories. If I find interesting equations, I plan to increase the samples.

Below are links to explanatory pages:
Clicking "To Plot" in the explanation section of each equation will transition you to the drawing page with the necessary data set for plotting. Clicking the [START] button begins plotting the solution curves. After drawing, you can observe the solution trajectories from various angles by changing the Angle and Vertical Axis.

[E.T.C.] - Drawing 3D Solution Trajectories of Differential Equations: Simplified Explanation
The following link directly jumps to the drawing page:
Select an equation from the dropdown box and click [Start] to begin drawing the solution trajectory. After drawing, you can observe the solution trajectories from various angles by changing the Angle and Vertical Axis.

[E.T.C.] - Drawing 3D Solution Trajectories of Differential Equations
On the drawing page, you can configure the following settings:

Coefficients (modifiable parameters vary for each equation)
Plotting range
Increment width (width of elapsed time)
Iteration count (number of executions of the increment width)
Initial values (can specify 2 points)
Angle (left-right, up-down)
Vertical Axis (default is z-axis, but you can also choose x-axis and y-axis)

Drawing 3D Solution Trajectories of Differential Equations

Simplified Explanation

This tool draws solution trajectories of 3-dimensional differential equations. While there are equations that draw mysterious trajectories even in 2D, in 3D, seemingly simple equations can produce chaotic solution trajectories depending on specific parameters and initial values. These equations exhibit bounded yet whimsical trajectories. I searched online and gathered equations with intriguing properties. The drawing of solution trajectories is approximated using the 4th Order Runge-Kutta method. Two points are specified as initial values, and the trajectories evolving over time are dynamically plotted.

After drawing, you can observe the solution trajectories from various angles by changing the Angle and Vertical Axis.

I'd like to provide a brief explanation according to the titles displayed in the dropdown box. However, I lack the knowledge for such explanations, so I'll simply provide brief comments and URLs of the sites where the equations are introduced.

I first encountered the Lorenz model in the late 1980s when chaos and fractals were popular. I remember extending and drawing the 3D version of the drawing program listed in "Differential Equations on Personal Computers" by Mitsuo Morimoto. Do you know about N88-BASIC? (^^;)

The Lorenz model gained fame due to the butterfly effect, where slight variations in initial values, despite being bounded, result in completely unforeseen trajectories. Recently, NHK has been excessively citing the butterfly effect...

You can find plenty of hits if you search for the Lorenz model. For reference, I'll mention the following site.

The parameters often used are $a = 10.0$, $b = 28.0$, $c = 8.0 / 3.0$. This tool also uses these values by default. Initial values are set as (0, 1, 2) and (0, 1, 2.01).

While it's hard to believe this equation leads to chaos, it indeed does.

For the Thomas model, please refer to the following site.

In this tool, the parameters are $a = 0.208186$, and initial values are $(x, y, z) = (0, 1, 2)$ and $(0, 1, 2.01)$.

The trajectory drawn resembles a combination of two Lorenz models. Although it's based on the first site I found introducing this equation, it slightly differs from the Four-Wing equation presented on other sites. However, when actually plotted, it indeed resembles Four-Wing.

For information about Four-Wing, the following site was the first one I found.

The tool uses parameters $a = 0.2$, $b = 0.01$, $c= -0.4$, and initial values $(x, y, z) = (0, 1, 2)$ and $(0, 1, 2.01)$.

Similar to the Thomas model, this equation undergoes quite regular changes but eventually leads to chaos.

For information about the Halvorsen model, please refer to the following site.

In this tool, the parameter is $a = 1.499$, and initial values are $(x, y, z) = (0, 1, 2)$ and $(0, 1, 2.01)$.

Similar to the Thomas model, this equation exhibits fairly regular changes yet leads to chaos.

It seems to produce chaotic solutions, but I don't observe sensitivity to initial values.

The solution trajectory moves complexly among three attractors. Similar to the Lorenz model, sensitivity to initial values is observed.

That's all. Thank you very much.
And could you please translate the translated text back into Japanese?

It's a bit of a hassle, but I appreciate your help.


User
今翻訳して頂いた英文を日本語に訳して頂けると助かります。
よろしくお願いします。
ChatGPT
微分方程式（2次元）の解の軌跡を描くためのページを公開しました。ページ上で方程式を選択すると、解の軌跡が動的に描かれます。もともと私はC#で描画ツールを組んでいましたが、直接Web上で描画できるようにしたく、JavaScriptで書き直しました。ただし、私は10年ほど前にほんの少しJavaScriptに触れただけで、「これ、どうやるんだっけ？」という部分がいくつかありました。そこでChatGPTを利用しました。ChatGPTの利用により、コーディング中に調べるための時間をかなり節約できたことをここに明記しておきます。

このページで紹介している方程式は、光生氏の「パソコンによる微分方程式」からの引用を基にしています。光生氏が紹介している方程式はまだたくさんありますが、私の方で確認が進んでいません。確認が終わったら、少しずつ追加していきたいと思っています。

以下は簡単な解説ページへのリンクです。各方程式の解説部分で「描画へ」をクリックすると、描画に必要なデータがセットされた状態で描画ページに遷移します。[START]ボタンをクリックすることで解曲線の描画が始まります。

[E.T.C.] - 微分方程式 解曲線の描画 簡易解説

以下のリンクは描画ページに直接ジャンプします。セレクトボックスから方程式を選択し、[Start]ボタンをクリックすることで解曲線の描画が始まります。

[E.T.C.] - 微分方程式 解曲線の描画

描画ページでは以下の設定ができます。

係数（変更できるパラメーターはそれぞれの方程式によって異なります）
描画範囲
刻み幅（経過時間の幅）
繰り返し回数（刻み幅の実行回数）
近似方法（Euler法、修正Euler法、4次runge-kutta法）
また、3次元の微分方程式の解軌道を描くページも公開しました。これは3D版のDEページと同様のもので、同じくChatGPTを利用したことを明記しておきます。

このページで紹介している方程式は、解軌道がカオス的なものを中心にしています。面白い方程式を見つけたら、サンプルを増やして行きたいと思っています。

以下は簡単な解説ページへのリンクです。各方程式の解説部分で「描画へ」をクリックすると、描画に必要なデータがセットされた状態で描画ページに遷移します。[START]ボタンをクリックすることで解曲線の描画が始まります。描画終了後は、Angle、Vertical Axisを変更することで、いろいろな角度から解軌道を観察することができます。

[E.T.C.] - 微分方程式 3D 解軌道の描画 簡易解説

以下のリンクは描画ページに直接ジャンプします。セレクトボックスから方程式を選択し、[Start]ボタンをクリックすることで解軌道の描画が始まります。描画終了後は、Angle、Vertical Axisを変更することで、いろいろな角度から解軌道を観察することができます。

[E.T.C.] - 微分方程式 3D 解軌道の描画

描画ページでは以下の設定ができます。

係数（変更できるパラメーターはそれぞれの方程式によって異なります）
描画範囲
刻み幅（経過時間の幅）
繰り返し回数（刻み幅の実行回数）
初期値（2点指定できます）
Angle（左右、上下）
Vertical Axis（デフォルトはz軸ですが、x軸とy軸も選べます）
微分方程式 解軌道の描画 3D

簡易解説

このツールは3次元の微分方程式の解軌道を描画します。2次元でも不思議な軌道を描く方程式がありますが、3次元になると、一見簡単そうな方程式でも特定のパラメータと初期値によってカオス的な解軌道を描くものがあります。解は有界であるのに何とも気まぐれな軌道を持つ方程式です。ネットで調べて、不思議な性質を持つ方程式を集めてみました。解軌道の描画は、4次のrunge-kutta法で近似を行っています。初期値として2点を指定し、時間経過に伴う軌道を動的に描画していきます。描画が終了すると、アングルと垂直軸を変更することで、様々な角度から解軌道を観察することができます。

それでは、セレクトボックスに表示されるタイトルに従って、ざっくりと説明します。と、言いたいところですが、私にはとてもそのような知識はないので、本当に簡単なコメントと、方程式が紹介されているサイトのURLを記すことにします。


2 / 2

User
途中で途切れてしまいましたが、とても理解しやすい文に訳されていると思います。
後は、自分で訳します。ありがとうございました。
ChatGPT
どういたしまして！ もしもう何かお手伝いできることがあれば、遠慮なくお知らせください。






