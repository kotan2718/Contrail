
htmlのページにスライダーバーを付けたいと思っています。
canvasの描画領域の下と右に、水平、垂直のスライダーバーを付けたいです。
スライダーの幅はcanvasuの大きさに合わせます。
元々はangle alpha、angule gammaとして、スピンボックスが設置されていますが、
操作性が悪く、スライダーの方が使いやすいのではないかと思った次第です。
canvasは縦横とも580pxなので、スライダーもその長さが合えば、操作しやすいのではないかと思います。
ネットで調べて、jquery ui を使用した方法を見つけました。
html、jsとも「① start」、「① end」で囲った部分にネットからコピーしたコードを貼り付けてあります。
これで、ページを表示しようとすると、dec01_v3.jsの①の部分で、
「$("#wkSlider2").slider({」の「slider」が定義されていないというエラーが表示されます。
私自身も、この貼り付け方ではまずいと思うのですが、
どのように修正すればスライダーバーが表示されるようになるか、教えて下さい。
よろしくお願いします。


== html ==

<!DOCTYPE HTML >
<html>

<HEAD>
    <META charset="UTF-8">

    <title>Differential Equations 3D</title>

    <!-- css start -->
        <!-- kz_etc start :: class指定:change_border_color, 全ファイル共通:リンク文字色, フォーカスリング -->
        <link rel="stylesheet" href="libs/etc/css/kz_footer_style.css" type="text/css">
        <link rel="stylesheet" href="libs/etc/css/kz_etc_style.css" type="text/css">
        <!-- kz_etc end -->
    <!-- css end -->

    <!-- js start -->
        <!-- jQuery start -->
        <script src="libs/jQuery/js/jquery-1.6.1.min.js" type="text/javascript"></script>
            <!-- kz_style start - img jq_blink, img jq_change -->
            <script src="libs/jQuery/kz/js/jq_kz_style.js" type="text/javascript"></script>
            <!-- kz_style end -->
        <!-- jQuery end -->
        <!-- ① 追加 start -->
        <!-- jQuery ui start -->
        <script type="text/javascript" src="https://code.jquery.com/ui/1.12.0/jquery-ui.min.js"></script>
        <link rel="stylesheet" href="http://code.jquery.com/ui/1.12.1/themes/hot-sneaks/jquery-ui.css">
        <!-- jQuery ui end -->
        <!-- ① 追加   end -->
        <!-- Sandbox DropDownMenu start -->
        <script src="libs/sandbox/js/script.js" type="text/javascript"></script>
        <!-- Sandbox DropDownMenu end -->

        <script type="text/javascript"
          src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
        </script>
        <script type="text/x-mathjax-config">
          MathJax.Hub.Config({
            TeX: { equationNumbers: { autoNumber: "AMS" }},
            tex2jax: {
              inlineMath: [ ['$','$'], ["\\(","\\)"] ],
              processEscapes: true
            },
            "HTML-CSS": { matchFontHeight: false },
            displayAlign: "left",
            displayIndent: "2em"
          });
        </script>

        <!-- deq initialize -->
        <script src="libs/etc/js/deq00_v3.js" type="text/javascript"></script>
    <!-- js end -->
</HEAD>

<BODY id="common-k"  onload="initialize()">
    <div id="container">
        <header>
            <a name="page_top"></a>
        </header>

        <div id="main960"> <!-- page main: start -->

            <!-- title -->
            <div id="title20">
                <h3 class="pt30 pb40">
                    微分方程式 解軌道の描画 3D
                </h3>
            </div>

            <!-- contents -->
            <div class="pic-left990 pb30">
                <div class="contents-2col-left" >
                    <p class="pb10">
                        <canvas id="graphCanvas" width="580" height="580" style="border: 1px solid #000;"></canvas>
                    </p>
                    <!-- ① 追加 start -->
                    <div style="background-color:#CCC; padding : 10px 50px;">
                        <div id="wkSlider2"></div>
                        <div id="wkValue"></div>
                    </div>
                    <!-- ① 追加   end -->

                    <p class="cLink" align="right">
                        <!-- 戻るリンク(動的に生成) -->
                    </p>
                </div>

                <div class="contents-2col-right">
                    <p class="pb10">
                        <select id="type" style="width: 220px;" onchange="changeType()">
                            <option value="01">&nbsp; 1. Lorenz system</option>
                        </select>
                    </p>
                    <p class="pb5">
                        <label for="dx"><span id="dx"></span></label>
                    </p>
                    <p class="pb5">
                        <label for="dy"><span id="dy"></span></label>
                    </p>
                    <p class="pb5">
                        <label for="dz"><span id="dz"></span></label>
                    </p>
                    <p class="pb10">
                        <label for="where"><span id="where"></span></label>
                    </p>
                    <p class="pb5">
                        係数
                    </p>
                    <p class="pb20">
                        <label for="ma" style="width: 20px; display: inline-block"> $a:$ </label>
                        <input type="number" id="ma" value="" style="width:80px; text-align:right;">
                        &emsp;
                        <label for="me" style="width: 20px; display: inline-block"> $e:$ </label>
                        <input type="number" id="me" value="" style="width:80px; text-align:right;"><br>
                        <!-- 中略 -->
                        <label for="md" style="width: 20px; display: inline-block"> $d:$ </label>
                        <input type="number" id="md" value="" style="width:80px; text-align:right;">
                        &emsp;
                        <label for="mh" style="width: 20px; display: inline-block"> $h:$ </label>
                        <input type="number" id="mh" value="" style="width:80px; text-align:right;"><br>
                    </p>

                    <div>
                        <!-- 描画角度 alpha -->
                        <div class="grid-item">
                            <p>
                                <label style="width: 8px; display: inline-block"> $ \alpha $ </label> :
                                <input type="number" id="angleAlpha" style="font-size: 100%; width:50px; text-align:right;" min="-180" max="180" onchange="changeAngle()" value="">
                            </p>
                        </div>
                    </div>

                    <div>
                        <!-- 描画角度 gamma -->
                        <div class="grid-item">
                            <p>
                                <label style="width: 8px; display: inline-block"> $ \gamma $ </label> :
                                <input type="number" id="angleGamma" style="font-size: 100%; width:50px; text-align:right;" min="-90" max="90" onchange="changeAngle()" value="">
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

<!--    <script src="libs/etc/js/deq01.js" type="text/javascript"></script> -->

        <footer>
       </footer>
    </div>
</BODY>

</html>


== deq00_v3.js ==

let selectedOption;

function initialize() {
    // 描画範囲の初期化
    let width0 = parseFloat(document.getElementById('width0').value);
    let wmax = width0 / 2;
    let wmin = -wmax;
    document.getElementById('wmax').innerText = wmax;
    document.getElementById('wmin').innerText = wmin;

    // 係数
    let ma = parseFloat(document.getElementById('ma').value);
    let mb = parseFloat(document.getElementById('mb').value);
    let mc = parseFloat(document.getElementById('mc').value);
    let md = parseFloat(document.getElementById('md').value);
    let me = parseFloat(document.getElementById('me').value);
    let mf = parseFloat(document.getElementById('mf').value);
    let mg = parseFloat(document.getElementById('mg').value);
    let mh = parseFloat(document.getElementById('mh').value);

    document.getElementById('ma').value = 10.0;
    document.getElementById('mb').value = 28.0;
    document.getElementById('mc').value = 8.0 / 3.0;
    document.getElementById('md').disabled = true;
    document.getElementById('me').disabled = true;
    document.getElementById('mf').disabled = true;
    document.getElementById('mg').disabled = true;
    document.getElementById('mh').disabled = true;

    // 式を表示する
    document.getElementById('dx').innerText = "$ \\dot{x} = ay - ax $";
    document.getElementById('dy').innerText = "$ \\dot{y} = bx - xz - y $";
    document.getElementById('dz').innerText = "$ \\dot{z} = xy - cz $";

    // 初期値を表示する
    document.getElementById('init1_x').value = 0;
    document.getElementById('init1_y').value = 1;
    document.getElementById('init1_z').value = 2;
    document.getElementById('init2_x').value = 0;
    document.getElementById('init2_y').value = 1;
    document.getElementById('init2_z').value = 2.01;

    // 描画アングルに初期値を設定する
    document.getElementById('angleAlpha').value = -20;
    document.getElementById('angleGamma').value = -30;

    // 選択ボックスの初期値を設定する
    const selectType = document.getElementById('type');
    selectType.selectedIndex = 0;

    // Stopボタンを使用不可に設定
    document.getElementById('stop').disabled = true;

    // Resetボタンを使用不可に設定
    document.getElementById('reset').disabled = true;

    // 描画速度
    document.getElementById('spd').value = 2;

    // URLから選択すべきオプションを取得
    const urlParams = new URLSearchParams(window.location.search);
    selectedOption = urlParams.get('selectedOption');

    // 解説ページから呼ばれたときは、以下を実行する
    // 選択すべきオプションが指定されている場合、そのオプションを選択し、changeType()関数を呼び出します
    if (selectedOption) {
        // goBack関数を呼び出す
        goBack();

        const selectElement = document.getElementById('type');
        selectElement.value = selectedOption; // 選択肢を選択
        changeType(); // 選択肢が変更された場合の処理を実行
        setTimeout(function() {
            startAnimation(); // 描画の実行
        }, 2000);
        document.getElementById("stop").focus();
        document.getElementById('start').disabled = true;
    }
}

// 解説のページに戻る関数
function goBack() {
    // window.history.back(); // ブラウザの「戻る」ボタンと同じ動作 <- 戻る位置(行)が10行程度ずれることがある
    // <a>要素を作成
    var link = document.createElement('a');

    // 現在表示されているurlを取得して、日本語ページか英語ページかの振り分けを行う
    const urlHere = window.location.href;

    if (urlHere.indexOf('en') != -1) {
        // href属性を設定
        link.href = "etc_DEQ_doc3_en.html?selectedOption=" + encodeURIComponent(selectedOption);
        // テキストコンテンツを設定
        link.textContent = "return to Explanation page";
    }
    else {
        // href属性を設定
        link.href = "etc_DEQ_doc3.html?selectedOption=" + encodeURIComponent(selectedOption);
        // テキストコンテンツを設定
        link.textContent = "解説ページに戻る";
    }

    // <p>要素を取得し、リンクを追加
    var paragraphElement = document.querySelector('.cLink');
    paragraphElement.appendChild(link);
}


== deq01_v3.js ==

// 描画角度 変更 html -> js
function changeAngle() {
    m_alpha = parseInt(document.getElementById('angleAlpha').value) || m_alpha;
    m_gamma = parseInt(document.getElementById('angleGamma').value) || m_gamma;

    if (m_gamma >= 90.0) {
        m_gamma90Flg = 1;
        m_gamma = 89.0;
    }
    else {
        m_gamma90Flg = 0;
    }
    if (m_gamma <= -90.0) {
        m_gamma90Flg = 1;
        m_gamma = -89.0;
    }
    else {
        m_gamma90Flg = 0;
    }
    if (drawnFlg == true)
        {
        // Resetボタンを使用可に設定
        document.getElementById('reset').disabled = false;
        mapping();
    }
}


// 描画角度 設定 js -> html
function setAngle() {
    document.getElementById('angleAlpha').value = m_alpha;
    document.getElementById('angleGamma').value = m_gamma;
}

// 描画速度 変更 html -> js
function changeSpeed() {
    spd = parseInt(document.getElementById('spd').value);
}

// ① start
$(function() {
        $("#wkSlider2").slider({
             max:100, //最大値
             min: 0, //最小値
             value: 50, //初期値
             step: 1, //幅

             slide: function( event, ui ) {
                 $("#wkValue").html("変更中："+ui.value);
             },
             create: function( event, ui ) {
                 $("#wkValue").html("初期値："+$(this).slider( "value" ));
             },
             change: function( event, ui ) {
                 $("#wkValue").html("現在値："+ui.value);
             }
        });
});
// ①  end



html

    <!-- css start -->

        <!-- kz_etc start :: class指定:change_border_color, 全ファイル共通:リンク文字色, フォーカスリング -->
        <link rel="stylesheet" href="libs/etc/css/kz_footer_style.css" type="text/css">
        <link rel="stylesheet" href="libs/etc/css/kz_etc_style.css" type="text/css">
        <!-- kz_etc end -->

    <style>
        #container {
            position: relative;
        }
        #graphCanvas {
            border: 1px solid #000;
        }
        #horizontal-slider-container {
            width: 580px;
            background-color: #CCC;
        }
        #vertical-slider-container {
            height: 580px;
            position: relative;
            top: -596px;
            left: 590px;
            width: 10px;
            background-color: #CCC;
        }
        #vertical-slider {
            height: 580px;
        }
        #contents-2col-left_deq {
            display: inline-block; * display: inline; * zoom: 1; vertical-align: middle; padding-right: 20px;
        }
        #contents-2col-right_deq {
            display: inline-block; * display: inline; * zoom: 1; vertical-align: middle;
        }

    </style>


htmlページのcanvasの下と右にスライダーバーを設置することができました。
現在、アングルの変更はスライダーバーからスムーズに行えます。
スライダーの変更はangleAlphaとangleBetaのテキストボックスに反映されます。
一方、テキストボックス側からの変更がスライダーに反映されません。
コードを見る限り、明らかです。
テキストボックスの変更がスライダーに反映させるにはどうすればよいでしょうか？
最初にページが表示されたときもangleAlpha、angleBetaの初期値は-20、-30ですが、
これも反映されるようにしたいです。

jqueryの関数仕様ですが、独特な形をしています。
jsの他の関数からslider bar ①を呼び出すことはできるのでしょうか？

<!DOCTYPE HTML >
<html>

<HEAD>
    <META charset="UTF-8">

    <title>Differential Equations 3D</title>

    <!-- css start -->
        <!-- kz_etc start :: class指定:change_border_color, 全ファイル共通:リンク文字色, フォーカスリング -->
        <link rel="stylesheet" href="libs/etc/css/kz_footer_style.css" type="text/css">
        <link rel="stylesheet" href="libs/etc/css/kz_etc_style.css" type="text/css">
        <!-- kz_etc end -->
    <!-- css end -->

    <!-- js start -->
        <!-- jQuery start -->
        <!--<script src="libs/jQuery/js/jquery-1.6.1.min.js" type="text/javascript"></script>-->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js" type="text/javascript"></script>
            <!-- kz_style start - img jq_blink, img jq_change -->
            <script src="libs/jQuery/kz/js/jq_kz_style.js" type="text/javascript"></script>
            <!-- kz_style end -->
        <!-- jQuery end -->
        <!-- jQuery ui start -->
        <script type="text/javascript" src="https://code.jquery.com/ui/1.12.0/jquery-ui.min.js"></script>
        <link rel="stylesheet" href="http://code.jquery.com/ui/1.12.1/themes/hot-sneaks/jquery-ui.css">
        <!-- jQuery ui end -->

        <script type="text/javascript"
          src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
        </script>
        <script type="text/x-mathjax-config">
          MathJax.Hub.Config({
            TeX: { equationNumbers: { autoNumber: "AMS" }},
            tex2jax: {
              inlineMath: [ ['$','$'], ["\\(","\\)"] ],
              processEscapes: true
            },
            "HTML-CSS": { matchFontHeight: false },
            displayAlign: "left",
            displayIndent: "2em"
          });
        </script>

        <!-- deq initialize -->
        <script src="libs/etc/js/deq00_v3.js" type="text/javascript"></script>

    <!-- js end -->

</HEAD>

<BODY id="common-k"  onload="initialize()">

    <div id="container">

        <header>
        </header>

        <div id="main960"> <!-- page main: start -->
            <!-- contents -->
            <div class="pic-left990 pb30">
                <div id="contents-2col-left_deq" >
                    <div id="contents-2col-left_deq" >
                        <p class="pb10">
                            <canvas id="graphCanvas" width="580" height="580"></canvas>
                        </p>
                    </div>
                    <div id="contents-2col-right_deq" >
                        <div id="vertical-slider-container">
                            <div id="vertical-slider"></div>
                        </div>
                    </div>
                    <div class="c-both"></div>
                    <div id="horizontal-slider-container">
                        <div id="horizontal-slider"></div>
                    </div>
                    <p class="cLink" align="right">
                        <!-- 戻るリンク(動的に生成) -->
                    </p>
                </div>
                <div id="contents-2col-right_deq">
                    <p class="pb10">
                        <select id="type" style="width: 220px;" onchange="changeType()">
                            <option value="01">&nbsp; 1. Lorenz system</option>
                        </select>
                    </p>
                    <div class="grid2">
                        <!-- 初期値(見出し2) -->
                        <div class="grid-item">
                            <p>
                                初期値
                                &emsp;
                                <label style="width: 20px; display: inline-block">1</label>
                                &emsp;&emsp;
                                <label style="width: 20px; display: inline-block">2</label>
                            </p>
                        </div>
                        <!-- 描画角度(見出し) -->
                        <div class="grid-item">
                            <p>
                                Angle
                            </p>
                        </div>
                    </div>

                    <div class="grid2">
                        <!-- 初期値 1,2 x -->
                        <div class="grid-item">
                            <p>
                                <label style="width: 20px; display: inline-block"> $x$ </label>
                                <input type="text" id="init1_x" value="0" style="width:50px; text-align:right;">
                                <input type="text" id="init2_x" value="0" style="width:50px; text-align:right;">
                            </p>
                        </div>
                        <!-- 描画角度 alpha -->
                        <div class="grid-item">
                            <p>
                                <label style="width: 8px; display: inline-block"> $ \alpha $ </label> :
                                <input type="text" id="angleAlpha" style="font-size: 100%; width:50px; text-align:right;" min="-180" max="180" onchange="changeAngle()" value="">
                            </p>
                        </div>
                    </div>

                    <div class="grid2">
                        <!-- 初期値 1,2 y -->
                        <div class="grid-item">
                            <p>
                                <label style="width: 20px; display: inline-block"> $y$ </label>
                                <input type="text" id="init1_y" value="1" style="width:50px; text-align:right;">
                                <input type="text" id="init2_y" value="1" style="width:50px; text-align:right;">
                            </p>
                        </div>
                        <!-- 描画角度 gamma -->
                        <div class="grid-item">
                            <p>
                                <label style="width: 8px; display: inline-block"> $ \gamma $ </label> :
                                <input type="text" id="angleGamma" style="font-size: 100%; width:50px; text-align:right;" min="-90" max="90" onchange="changeAngle()" value="">
                            </p>
                        </div>
                    </div>

                    <p class="pb20">
                        <button class="btn-radius-solid" id="start" onclick="startAnimation()">Start</button>
                        &emsp;&emsp;&nbsp;&nbsp;
                        <button class="btn-radius-solid" id="stop" onclick="stopAnimation()">Stop</button>
                        &emsp;&emsp;&nbsp;&nbsp;
                        <button class="btn-radius-solid" id="reset" onclick="resetAnimation()">Reset</button>
                    </p>

                <!-- deq javascript呼び出し -->
                <script src="libs/etc/js/deq01_v3.js" type="text/javascript"></script>

                </div>
                <div class="c-both"></div>
            </div>
        </div>

        <footer>
        </footer>

    </div>

</BODY>

</html>

== css ==
kz_etc_style.css

/* DEQ_v3 slider bar */
#container {
    position: relative;
}
#graphCanvas {
    border: 1px solid #000;
}
#horizontal-slider-container {
    width: 580px;
    background-color: #CCC;
}
#vertical-slider-container {
    height: 580px;
    position: relative;
    top: -8px;
    left: -10px;
    background-color: #CCC;
}
#vertical-slider {
    height: 580px;
}
#contents-2col-left_deq {
    display: inline-block; * display: inline; * zoom: 1; vertical-align: middle; padding-right: 20px;
}
#contents-2col-right_deq {
    display: inline-block; * display: inline; * zoom: 1; vertical-align: middle;
}


== js ==
*****
deq00_v3.js
*****

function initialize() {
    // URLから選択すべきオプションを取得
    const urlParams = new URLSearchParams(window.location.search);
    selectedOption = urlParams.get('selectedOption');

    // 解説ページから呼ばれたときは、以下を実行する
    // 選択すべきオプションが指定されている場合、そのオプションを選択し、changeType()関数を呼び出します
    if (selectedOption) {
        // goBack関数を呼び出す
        goBack();

        const selectElement = document.getElementById('type');
        selectElement.value = selectedOption; // 選択肢を選択
        changeType(); // 選択肢が変更された場合の処理を実行
        setTimeout(function() {
            startAnimation(); // 描画の実行
        }, 2000);
        document.getElementById("stop").focus();
        document.getElementById('start').disabled = true;
    }
}

// 解説のページに戻る関数
function goBack() {
    // window.history.back(); // ブラウザの「戻る」ボタンと同じ動作 <- 戻る位置(行)が10行程度ずれることがある
    // <a>要素を作成
    var link = document.createElement('a');

    // 現在表示されているurlを取得して、日本語ページか英語ページかの振り分けを行う
    const urlHere = window.location.href;

    if (urlHere.indexOf('en') != -1) {
        // href属性を設定
        link.href = "etc_DEQ_doc3_en.html?selectedOption=" + encodeURIComponent(selectedOption);
        // テキストコンテンツを設定
        link.textContent = "return to Explanation page";
    }
    else {
        // href属性を設定
        link.href = "etc_DEQ_doc3.html?selectedOption=" + encodeURIComponent(selectedOption);
        // テキストコンテンツを設定
        link.textContent = "解説ページに戻る";
    }

    // <p>要素を取得し、リンクを追加
    var paragraphElement = document.querySelector('.cLink');
    paragraphElement.appendChild(link);
}


*****
deq01_v3.js
*****

// 描画角度 変更 html -> js
function changeAngle() {
    m_alpha = parseInt(document.getElementById('angleAlpha').value) || m_alpha;
    m_gamma = parseInt(document.getElementById('angleGamma').value) || m_gamma;

    if (m_gamma >= 90.0) {
        m_gamma90Flg = 1;
        m_gamma = 89.0;
    }
    else {
        m_gamma90Flg = 0;
    }
    if (m_gamma <= -90.0) {
        m_gamma90Flg = 1;
        m_gamma = -89.0;
    }
    else {
        m_gamma90Flg = 0;
    }
    if (drawnFlg == true)
        {
        // Resetボタンを使用可に設定
        document.getElementById('reset').disabled = false;
        mapping();
    }
}

// 描画角度 設定 js -> html
function setAngle() {
    document.getElementById('angleAlpha').value = m_alpha;
    document.getElementById('angleGamma').value = m_gamma;
}

function changeType() {
    const type = String(document.getElementById('type').value);

    switch (type) {
        case "01":  // Lorenz
            dat = 1;
            // vertical axis
            vAx = 3;
            setAxis();
            m_alpha = -20.0;
            m_gamma = -30.0;
            setAngle();
            if (resetFlg) {
                return;
            }
            changeProperty(0);
            // 描画範囲
            width0 = 100;
            height0 = width0;
            document.getElementById('width0').value = width0;
            // 係数デフォルト値
            document.getElementById('ma').value = 10.0;
            document.getElementById('mb').value = 28.0;
            document.getElementById('mc').value = 8.0 / 3.0;
            ma_used = 1;
            mb_used = 1;
            mc_used = 1;
            // 初期値デフォルト値
            document.getElementById('init1_x').value = 0;
            document.getElementById('init1_y').value = 1;
            document.getElementById('init1_z').value = 2;
            document.getElementById('init2_x').value = 0;
            document.getElementById('init2_y').value = 1;
            document.getElementById('init2_z').value = 2.01;
            // 式を表示する
            document.getElementById('dx').innerText = "$ \\dot{x} = ay - ax $";
            document.getElementById('dy').innerText = "$ \\dot{y} = bx - xz - y $";
            document.getElementById('dz').innerText = "$ \\dot{z} = xy - cz $";
            document.getElementById('where').innerText = "";
            updateRange();
            document.getElementById('cnt_dp').value = 3200;
            document.getElementById('dh').value = 0.01;
            document.getElementById('ma').disabled = false;
            document.getElementById('mb').disabled = false;
            document.getElementById('mc').disabled = false;
            break;
        defaut:
            break;
    }
    // スケーリング
    scaleX = canvas.width / width0;
    scaleY = canvas.height / height0;

    mag = width0 / magStd;
    prep();
    scaling();

    // 他の処理が終わった後にMathJaxを再度実行する
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);

}


// slider bar ①
$(function() {
    $("#horizontal-slider").slider({
        max: 180,
        min: -180,
        value: 0,
        step: 1,
        slide: function(event, ui) {
            $("#angleAlpha").val(ui.value);
            changeAngle();
        }
    });

    $("#vertical-slider").slider({
        orientation: "vertical",
        max: 90,
        min: -90,
        value: 0,
        step: 1,
        slide: function(event, ui) {
            $("#angleGamma").val(ui.value);
            changeAngle();
        }
    });
});


ありがとうございます。期待通りの動作ができるようになりました。
描画中はスライダーバーの変更を受け付けないようにするにはどうすればよいでしょうか？
htmlページにはいろいろな入力ボックスがあるのですが、以下のようにして
変更可、変更不可を切り替えています。
この中に組み込むことはできますか？


// コントロールの使用可否 : 描画中, それ以外の場合
function usability(flg)
{
    // 使用可否属性がdisabledしかないので、trueとfalseが逆になる
    if (flg == true) {
        flg = false;
    }
    else {
        flg = true;
    }
    document.getElementById('type').disabled = flg;
        if (ma_used == 1) {
            document.getElementById('ma').disabled = flg;
        }
        else {
            document.getElementById('ma').disabled = true;
            }
        if (mb_used == 1) {
            document.getElementById('mb').disabled = flg;
        }
        else {
            document.getElementById('mb').disabled = true;
        }
        if (mc_used == 1) {
            document.getElementById('mc').disabled = flg;
        }
        else {
            document.getElementById('mc').disabled = true;
        }
        if (md_used == 1) {
            document.getElementById('md').disabled = flg;
        }
        else {
            document.getElementById('md').disabled = true;
        }
        if (me_used == 1) {
            document.getElementById('me').disabled = flg;
        }
        else {
            document.getElementById('me').disabled = true;
        }
        if (mf_used == 1) {
            document.getElementById('mf').disabled = flg;
        }
        else {
            document.getElementById('mf').disabled = true;
        }
        if (mg_used == 1) {
            document.getElementById('mg').disabled = flg;
        }
        else {
            document.getElementById('mg').disabled = true;
        }
        if (mh_used == 1) {
            document.getElementById('mh').disabled = flg;
        }
        else {
            document.getElementById('mh').disabled = true;
        }
    document.getElementById('width0').disabled = flg;
    document.getElementById('spd').disabled = flg;
    document.getElementById('dh').disabled = flg;
    document.getElementById('cnt_dp').disabled = flg;
    document.getElementById('init1_x').disabled = flg;
    document.getElementById('init2_x').disabled = flg;
    document.getElementById('init1_y').disabled = flg;
    document.getElementById('init2_y').disabled = flg;
    document.getElementById('init1_z').disabled = flg;
    document.getElementById('init2_z').disabled = flg;
    document.getElementById('angleAlpha').disabled = flg;
    document.getElementById('angleGamma').disabled = flg;
    document.getElementById('axX').disabled = flg;
    document.getElementById('axY').disabled = flg;
    document.getElementById('axZ').disabled = flg;
    document.getElementById('start').disabled = flg;
    // R3Dの変換でDrawLineがoverflowになったときの対応(回転を許可すると無限ループに入る可能性あり)
    /*
    if (rotateFlg == false)
    {
        nUD_alpha.Enabled = false;
        nUD_gamma.Enabled = false;
        rotateFlg = true;
    }
    if (flg == true) {
        btStop.Enabled = false;
    }
    else {
        btStop.Enabled = true;
    }
    */
    // 逆になったtrueとfalseを元に戻す
    if (flg == true) {
        flg = false;
    }
    else {
        flg = true;
    }
    // Stopボタンだけは動きが逆になる
    document.getElementById('stop').disabled = flg;
}

