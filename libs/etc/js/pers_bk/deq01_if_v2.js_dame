        // Gloavbl 変数 //
        let dat = 1;
        // 係数
        let ma;
        let mb;
        let mc;
        let md;
        let me;
        let mf;
        let mg;
        let mh;
        // 係数使用可否
        let ma_used = 1;
        let mb_used = 1;
        let mc_used = 1;
        let md_used = 1;
        let me_used = 0;
        let mf_used = 0;
        let mg_used = 0;
        let mh_used = 0;
        //////////////////

        let width0 = 8;
        let height0 = 8;
        
        let cons = 0.0;

        const canvas = document.getElementById('graphCanvas');
        const ctx = canvas.getContext('2d');

        // 描画領域をリセット
        ctx.fillStyle = 'rgb( 0, 0, 0)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // リセットフラグ 再描画の条件を設定する
        let resetFlg = true;

        function animateGraph() {

            let x0, y0, x1, y1, x2, y2;
            let f0, f1, f2, f3, f4;

            // 描画中に使用不可とするコントロール
            usability(false);

            // スケーリング
            let scaleX = canvas.width / width0;
            let scaleY = canvas.height / height0;
            let pixelX;
            let pixelY;

            // x軸の描画
            ctx.beginPath();
            ctx.moveTo(0, canvas.height / 2); // canvasの中心から左右に直線を引く
            ctx.lineTo(canvas.width, canvas.height / 2);
            ctx.strokeStyle = 'rgb(155, 155, 155)';
            ctx.stroke();

            // y軸の描画
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0); // canvasの中心から上下に直線を引く
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.strokeStyle = 'rgb(155, 155, 155)';
            ctx.stroke();

            for (let k = 0; k < 1; k++) {

                let xs = 0.1;
                let ys = 0.1;
//                let xs = 0.01;
//                let ys = 0.01;

                x0 = 0;
                y0 = 0;

for (let m = 0; m < canvas.width; m++) {
    for (let n = 0; n < canvas.height; n++) {
        let x = (m - canvas.width / 2) / scaleX;
        let y = (canvas.height / 2 - n) / scaleY;
        f0 = 0;
        f1 = FNA(x, y);
        f2 = FNA(x + xs, y);
        f3 = FNA(x, y + ys);
        f4 = FNA(x + xs, y + ys);
        if (f1 * f2 <= 0) {
            f0 = 1;
            x1 = x + (f1 / (f1 - f2)) * xs;
            y1 = y;
        }
        if (f3 * f4 <= 0) {
            if (f0 == 1) {
                x2 = x + (f3 / (f3 - f4)) * xs;
                y2 = y + ys;
                // 描画処理
                let pixelX1 = m;
                let pixelY1 = n;
                let pixelX2 = (x2 * scaleX + canvas.width / 2);
                let pixelY2 = (canvas.height / 2 - y2 * scaleY);

                ctx.beginPath();
                ctx.moveTo(pixelX1, pixelY1);
                ctx.lineTo(pixelX2, pixelY2);
                ctx.strokeStyle = 'rgb(100, 149, 237)';
                ctx.stroke();
            } else {
                continue;
            }
        }
    }
}
            // 描画後に使用可とするコントロール
//            usability(true);
//        }

        // コントロールの使用可否 : 描画中, それ以外の場合
        function usability(flg)
        {
            // 使用可否属性がdisabledしかないので、trueとfalseが逆になる
            if (flg == true) {
                flg = false;
            }
            else {
                flg = true;
            }
            document.getElementById('type').disabled = flg;
                if (ma_used == 1) {
                    document.getElementById('ma').disabled = flg;
                }
                else {
                    document.getElementById('ma').disabled = true;
                    }
                if (mb_used == 1) {
                    document.getElementById('mb').disabled = flg;
                }
                else {
                    document.getElementById('mb').disabled = true;
                }
                if (mc_used == 1) {
                    document.getElementById('mc').disabled = flg;
                }
                else {
                    document.getElementById('mc').disabled = true;
                }
                if (md_used == 1) {
                    document.getElementById('md').disabled = flg;
                }
                else {
                    document.getElementById('md').disabled = true;
                }
                if (me_used == 1) {
                    document.getElementById('me').disabled = flg;
                }
                else {
                    document.getElementById('me').disabled = true;
                }
                if (mf_used == 1) {
                    document.getElementById('mf').disabled = flg;
                }
                else {
                    document.getElementById('mf').disabled = true;
                }
                if (mg_used == 1) {
                    document.getElementById('mg').disabled = flg;
                }
                else {
                    document.getElementById('mg').disabled = true;
                }
                if (mh_used == 1) {
                    document.getElementById('mh').disabled = flg;
                }
                else {
                    document.getElementById('mh').disabled = true;
                }
            document.getElementById('width0').disabled = flg;
//            document.getElementById('dh').disabled = flg;
//            document.getElementById('cnt_dp').disabled = flg;
            document.getElementById('start').disabled = flg;
        }

        function startAnimation() {
            ma = parseFloat(document.getElementById('ma').value);
            mb = parseFloat(document.getElementById('mb').value);
            mc = parseFloat(document.getElementById('mc').value);
            md = parseFloat(document.getElementById('md').value);
            me = parseFloat(document.getElementById('me').value);
            mf = parseFloat(document.getElementById('mf').value);
            mg = parseFloat(document.getElementById('mg').value);
            mh = parseFloat(document.getElementById('mh').value);
            width0 = parseFloat(document.getElementById('width0').value) || width0;
            height0 = parseFloat(document.getElementById('width0').value) || width0;

            // 描画領域をリセット
            if (resetFlg == true) {
                ctx.fillStyle = 'rgb( 0, 0, 0)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }
            animateGraph();
        }

        // リセットフラグ
        function handleCheckbox(flg) {
            if (flg) {
                resetFlg = true;
            } else {
                resetFlg = false;
            }
        }

        function updateRange() {
            const width0 = parseFloat(document.getElementById('width0').value);
            const wmax = width0 / 2;
            const wmin = -wmax;
            document.getElementById('wmax').innerText = wmax;
            document.getElementById('wmin').innerText = wmin;
        }

        function setRange() {
            document.getElementById('width0').value = 8;
            document.getElementById('cnt_dp').value = 320;
            document.getElementById('dh').value = 0.01;
            updateRange();
        }

        function changeType() {
            const type = String(document.getElementById('type').value);
            const typeAry = type.split('&');

//            const selectMode = document.getElementById('mode');

            switch (typeAry[0]) {
                case "01":  
//                    selectMode.selectedIndex = 2;
                    dat = 1;
                    switch (typeAry[1]) {
                        case "01":  // 固有値の1つが0の場合
                    // 式を表示する
                    document.getElementById('dx').innerText = "\\[ x^2 + y^2 = const \\]";
                    document.getElementById('dy').innerText = "";
                            changeProperty(0);
                            document.getElementById('ma').value = 1;
                            document.getElementById('mb').value = 1;
                            document.getElementById('mc').value = 2;
                            document.getElementById('md').value = 2;
                            setRange();
                            break;
                        defaut:
                            break;
                    }
                    document.getElementById('ma').disabled = false;
                    document.getElementById('mb').disabled = false;
                    document.getElementById('mc').disabled = false;
                    document.getElementById('md').disabled = false;
                    ma_used = 1;
                    mb_used = 1;
                    mc_used = 1;
                    md_used = 1;

                    break;
            }

            // 固有値
            // ラベルを一度非表示にする
            document.getElementById('lambda').style.visibility ="hidden";
            document.getElementById('KAI1').style.visibility ="hidden";
            document.getElementById('pm').style.visibility ="hidden";
            document.getElementById('KAI2').style.visibility ="hidden";

            // 描画領域をリセット
            ctx.fillStyle = 'rgb( 0, 0, 0)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // 他の処理が終わった後にMathJaxを再度実行する
            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);

        }

        function changeProperty(flg) {
                ma_used = 0;
                mb_used = 0;
                mc_used = 0;
                md_used = 0;
                me_used = 0;
                mf_used = 0;
                mg_used = 0;
                mh_used = 0;
                document.getElementById('ma').value = "";
                document.getElementById('mb').value = "";
                document.getElementById('mc').value = "";
                document.getElementById('md').value = "";
                document.getElementById('me').value = "";
                document.getElementById('mf').value = "";
                document.getElementById('mg').value = "";
                document.getElementById('mh').value = "";
                if (flg == 0) {
                    document.getElementById('ma').disabled = true;
                    document.getElementById('mb').disabled = true;
                    document.getElementById('mc').disabled = true;
                    document.getElementById('md').disabled = true;
                    document.getElementById('me').disabled = true;
                    document.getElementById('mf').disabled = true;
                    document.getElementById('mg').disabled = true;
                    document.getElementById('mh').disabled = true;
                }
                else {
                    document.getElementById('ma').disabled = false;
                    document.getElementById('mb').disabled = false;
                    document.getElementById('mc').disabled = false;
                    document.getElementById('md').disabled = false;
                    document.getElementById('me').disabled = false;
                    document.getElementById('mf').disabled = false;
                    document.getElementById('mg').disabled = false;
                }
        }

        function FNA(x, y) {
            let FNA;
            switch (dat)
            {
                case 1:
                    //FNA = x*x + y*y -cons;
                    FNA = x*x*x - 2*x*y + y*y*y -cons;
                    return FNA;
                default:
                    break;
            }
            return 0.0;
        }
