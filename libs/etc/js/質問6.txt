javascriptのeval()についての質問です。

htmlのページでテキストボックスに入力された数式を、jsで実行させたいと思っています。
eval()関数が使われているサイトを知り、実際に試してみました。

以下に要約したコードをしまします。

///////////////
test.js
///////////////

var formula;

let dt = 0; //
let x  = 1; // ① dt, x, y はjs側でセットされる数値
let y  = 2; //

formula = "-y * y * y"; // ② 実際は、この文字列がhtml側から渡される

function FNF(dt, x, y) {
    FNF = f(dt, x, y);  // ③
    return FNF;
}

function f(dt, x, y) {
    return eval(formula);
}

なかなか便利な関数だと思ったのですが、
eval()についてネットで調べて見ると、使ってはいけない関数の代表として取り上げられています。

①はjs側で用意するデータですが、②はhtmlのページがから渡されます。
これで、③が実行される場合は、やはり危険なのでしょうか？

危険だとすれば、どのような危険性があるのでしょうか？
それを回避するには、上記のコードをどのように修正すべきでしょうか？



== 回答 ==

JavaScriptのeval()関数は、与えられた文字列をJavaScriptコードとして実行します。そのため、セキュリティ上のリスクがあります。特に、不正なコードが渡された場合には、意図しない動作を引き起こす可能性があります。例えば、悪意のあるユーザーがコードインジェクション攻撃を行うことが考えられます。

上記のコードでは、formula変数に直接文字列が代入され、eval()関数によってその文字列が実行されるため、悪意のあるコードが渡されると安全ではありません。

代替手段としては、eval()関数の代わりにFunction()コンストラクタを使用することができます。これにより、実行されるコードをより制限できます。以下はその修正例です。

javascript
Copy code
var formula;

let dt = 0;
let x  = 1;
let y  = 2;

formula = "-y * y * y";

function FNF(dt, x, y) {
    FNF = f(dt, x, y);
    return FNF;
}

function f(dt, x, y) {
    // Function コンストラクタを使用して関数を作成
    var func = new Function('dt', 'x', 'y', 'return ' + formula);
    // 作成した関数を実行して結果を返す
    return func(dt, x, y);
}
この修正により、Function()コンストラクタを使用して関数を動的に作成し、その中に式を埋め込んでいます。
しかし、これでも安全ではなく、慎重に検討する必要があります。可能であれば、eval()やFunction()コンストラクタを使わずに別のアプローチを検討することが望ましいです。


== 以下、安全な実装方法 ==

User
formulaに渡される構文を解析するパーサーを実装するという方法があるようですが、ライブラリとしてお勧めのものはありますか？


JavaScriptで数式を解析するためのライブラリはいくつかあります。その中でもよく使われるものとしては以下のものがあります。

Math.js: 数式の評価や解析、単位の変換、行列演算などを行う強力なライブラリです。数式を解析する機能も提供しています。

GitHub: mathjs/mathjs
公式ウェブサイト: Math.js
jsep: JavaScriptの式を解析するためのシンプルで軽量なライブラリです。複雑な式の解析や評価を行うのに便利です。

GitHub: soney/jsep
expr-eval: 簡単な式の解析と評価を行うことができるライブラリです。複雑な数式のサポートは限られていますが、シンプルな使用ができます。

GitHub: silentmatt/expr-eval
これらのライブラリを使用することで、安全で効率的な数式の解析が可能になります。それぞれのライブラリのドキュメントやサンプルコードを参照して、プロジェクトに最適なものを選択してください。


User
1, 2, 3をそれぞれ、先ほど回答して頂いたコードに埋め込むことはできますか？
ChatGPT
はい、それぞれのライブラリを使用して先ほどのコードに統合することは可能です。以下に各ライブラリを使用したコードの例を示します。

Math.jsを使用する場合：
javascript
Copy code
// Math.jsをスクリプトタグで読み込んでいる前提
// https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.4.4/math.js

var formula;

let dt = 0;
let x  = 1;
let y  = 2;

formula = "-y * y * y";

function FNF(dt, x, y) {
    FNF = f(dt, x, y);
    return FNF;
}

function f(dt, x, y) {
    // Math.jsのevaluate関数を使用して式を評価
    return math.evaluate(formula, { dt: dt, x: x, y: y });
}
jsepを使用する場合：
javascript
Copy code
// jsepをスクリプトタグで読み込んでいる前提
// https://cdnjs.cloudflare.com/ajax/libs/jsep/1.1.1/jsep.min.js

var formula;

let dt = 0;
let x  = 1;
let y  = 2;

formula = "-y * y * y";

function FNF(dt, x, y) {
    FNF = f(dt, x, y);
    return FNF;
}

function f(dt, x, y) {
    // jsepを使用して式を解析
    var parsedFormula = jsep(formula);
    // 解析された式を評価
    return evaluateExpression(parsedFormula, { dt: dt, x: x, y: y });
}

// jsepで解析された式を再帰的に評価する関数
function evaluateExpression(expr, context) {
    switch (expr.type) {
        case 'BinaryExpression':
            var left = evaluateExpression(expr.left, context);
            var right = evaluateExpression(expr.right, context);
            return eval(left + expr.operator + right);
        case 'Identifier':
            return context[expr.name];
        case 'Literal':
            return expr.value;
        default:
            throw new Error('Unsupported expression type: ' + expr.type);
    }
}
expr-evalを使用する場合：
javascript
Copy code
// expr-evalをスクリプトタグで読み込んでいる前提
// https://cdnjs.cloudflare.com/ajax/libs/expr-eval/2.0.2/expr-eval.min.js

var formula;

let dt = 0;
let x  = 1;
let y  = 2;

formula = "-y * y * y";

function FNF(dt, x, y) {
    FNF = f(dt, x, y);
    return FNF;
}

function f(dt, x, y) {
    // expr-evalを使用して式を解析して評価
    var parser = new Parser();
    var expr = parser.parse(formula);
    return expr.evaluate({ dt: dt, x: x, y: y });
}
これらのコードは、それぞれのライブラリを使用して式を解析し、評価しています。使用するライブラリに合わせてコードを適切に調整してください。

User
ありがとうございます。確認してみます。
ChatGPT
どういたしまして！何か他に質問があれば、遠慮なくどうぞ。成功を祈っています！





